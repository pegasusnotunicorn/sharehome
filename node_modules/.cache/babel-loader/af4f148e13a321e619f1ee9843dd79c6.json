{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditorWrapper.js\";\nimport React, { useState, useReducer } from 'react'; //custom files\n\nimport CardEditorWrapper from '../CardEditor/CardEditorWrapper.js';\nimport * as CardConstants from '../CardEditor/CardConstants.js'; //reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.card];\n\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item at index\n        if (index === action.index) {\n          return false;\n        } //remove item with property with value\n        else if (item[action.property] === action.value) {\n            return false;\n          } //every other item stays\n\n\n        return true;\n      });\n\n    case 'update':\n      return state.map((item, index) => {\n        //replace the item at index\n        if (index === action.index) {\n          return action.card;\n        } //leave every other item unchanged\n\n\n        return item;\n      });\n\n    case 'reset':\n      return [action.card];\n\n    default:\n      throw new Error();\n  }\n} //wrapper for card editor section (including input + PDF)\n\n\nlet currentIndex = 0;\nlet currentCard = CardConstants.getDefaultCardObject();\n\nfunction DeckEditorWrapper() {\n  const [cards, dispatch] = useReducer(reducer, [currentCard]); //updates the current card and updates it in the cards array\n\n  const updateCurrentCard = card => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    }); //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }; //deletes all cards and resets index to 0\n\n\n  const resetAllCards = () => {\n    currentIndex = 0;\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n  }; //adds a new card and sets the index to last\n\n\n  const addNewCard = () => {\n    currentIndex++;\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n  }; //deletes the current card and sets the index to last\n\n\n  const removeCurrentCard = () => {\n    currentIndex--;\n    currentIndex = currentIndex < 0 ? 0 : currentIndex;\n    currentCard = currentIndex < 0 ? CardConstants.getDefaultCardObject() : cards[currentIndex];\n    dispatch({\n      type: 'remove',\n      index: currentIndex\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardEditorWrapper, {\n    currentCard: currentCard,\n    setCurrentCard: updateCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetAllCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"Reset All\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNewCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Add New Card\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: removeCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Remove Current Card\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      console.log(currentCard);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, \"Log current card\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      console.log(cards);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, \"Log cards\"));\n}\n\nexport default DeckEditorWrapper;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditorWrapper.js"],"names":["React","useState","useReducer","CardEditorWrapper","CardConstants","reducer","state","action","type","card","filter","item","index","property","value","map","Error","currentIndex","currentCard","getDefaultCardObject","DeckEditorWrapper","cards","dispatch","updateCurrentCard","resetAllCards","addNewCard","removeCurrentCard","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react';\n\n//custom files\nimport CardEditorWrapper from '../CardEditor/CardEditorWrapper.js';\nimport * as CardConstants from '../CardEditor/CardConstants.js';\n\n//reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.card];\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item at index\n        if(index === action.index) {\n          return false;\n        }\n        //remove item with property with value\n        else if (item[action.property] === action.value){\n          return false;\n        }\n        //every other item stays\n        return true;\n      });\n    case 'update':\n      return state.map((item, index) => {\n        //replace the item at index\n        if(index === action.index) {\n          return action.card;\n        }\n        //leave every other item unchanged\n        return item;\n      });\n    case 'reset':\n      return [action.card];\n    default:\n      throw new Error();\n  }\n}\n\n//wrapper for card editor section (including input + PDF)\nlet currentIndex = 0;\nlet currentCard = CardConstants.getDefaultCardObject();\nfunction DeckEditorWrapper(){\n  const [cards, dispatch] = useReducer(reducer, [currentCard]);\n\n  //updates the current card and updates it in the cards array\n  const updateCurrentCard = (card) => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    });\n\n    //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }\n\n  //deletes all cards and resets index to 0\n  const resetAllCards = () => {\n    currentIndex = 0;\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n  }\n\n  //adds a new card and sets the index to last\n  const addNewCard = () => {\n    currentIndex++;\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n  }\n\n  //deletes the current card and sets the index to last\n  const removeCurrentCard = () => {\n    currentIndex--;\n    currentIndex = (currentIndex < 0) ? 0 : currentIndex;\n    currentCard = (currentIndex < 0) ? CardConstants.getDefaultCardObject() : cards[currentIndex];\n    dispatch({\n      type: 'remove',\n      index: currentIndex\n    });\n  }\n\n  return (\n    <div>\n      <CardEditorWrapper\n        currentCard={currentCard}\n        setCurrentCard={updateCurrentCard}\n      />\n      <button onClick={resetAllCards}>Reset All</button>\n      <button onClick={addNewCard}>Add New Card</button>\n      <button onClick={removeCurrentCard}>Remove Current Card</button>\n      <button onClick={()=>{console.log(currentCard)}}>Log current card</button>\n      <button onClick={()=>{console.log(cards)}}>Log cards</button>\n    </div>\n  );\n}\n\nexport default DeckEditorWrapper;\n"]},"metadata":{},"sourceType":"module"}