{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/CardEditor/CardEditorWrapper.js\";\nimport React from 'react';\nimport { BlobProvider } from '@react-pdf/renderer'; //custom files\n\nimport downloadPDFFile from '../utils/downloadPDFFile.js';\nimport PDFDocument from './PDFDocument';\nimport PDFViewer from './PDFViewer';\nimport InputWrapper from './InputWrapper';\nimport * as CardConstants from './CardConstants.js'; //wrapper for card editor section (including input + PDF)\n//needs to get via props, the currentCard and setter for changing currentCard properties\n\nfunction CardEditorWrapper(props) {\n  const currentCard = props.currentCard;\n  const setCurrentCard = props.setCurrentCard; //PDF document\n\n  const cardDocument = /*#__PURE__*/React.createElement(PDFDocument, {\n    name: currentCard.name,\n    japaneseName: currentCard.japaneseName,\n    age: currentCard.age,\n    job: currentCard.job,\n    image: currentCard.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }); //returns a new card details object with newValue for newProp\n\n  const updateCurrentCard = (newProp, newValue) => {\n    return { ...currentCard,\n      [newProp]: newValue\n    };\n  }; //event handlers for inputs\n\n\n  const handleInputChange = e => {\n    switch (e.target.name) {\n      case 'image':\n        const tempImage = e.target.files[0] ? URL.createObjectURL(e.target.files[0]) : CardConstants.defaultImage;\n        setCurrentCard(updateCurrentCard(\"image\", tempImage));\n        break;\n\n      case 'download':\n        downloadPDFFile(cardDocument, currentCard.name + \".pdf\");\n        break;\n\n      default:\n        setCurrentCard(updateCurrentCard(e.target.name, e.target.value));\n        break;\n    }\n  }; //return loading screen\n\n\n  const renderLoadingPreview = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"PDFLoading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, \"Loading preview...\");\n  }; //return PDF preview (in HTML)\n\n\n  const renderPDFPreview = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"PDFLoading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, currentCard.name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, currentCard.japaneseName), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, currentCard.age), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, currentCard.job), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, currentCard.image));\n  }; //PDF file is ready to have stuff done to it\n\n\n  const onPDFLoadSuccess = () => {\n    console.log('wooh');\n  };\n\n  const loadPDFFile = ({\n    blob,\n    url,\n    loading,\n    error\n  }) => {\n    if (!loading && !error && blob && url) {\n      onPDFLoadSuccess();\n    }\n\n    return renderPDFPreview();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"PDFWrapper\",\n    style: {\n      height: CardConstants.PDFDimensions.height * 2,\n      width: CardConstants.PDFDimensions.width * 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BlobProvider, {\n    document: cardDocument,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, loadPDFFile)), /*#__PURE__*/React.createElement(InputWrapper, {\n    handleInputChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default CardEditorWrapper;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/CardEditor/CardEditorWrapper.js"],"names":["React","BlobProvider","downloadPDFFile","PDFDocument","PDFViewer","InputWrapper","CardConstants","CardEditorWrapper","props","currentCard","setCurrentCard","cardDocument","name","japaneseName","age","job","image","updateCurrentCard","newProp","newValue","handleInputChange","e","target","tempImage","files","URL","createObjectURL","defaultImage","value","renderLoadingPreview","renderPDFPreview","onPDFLoadSuccess","console","log","loadPDFFile","blob","url","loading","error","height","PDFDimensions","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { BlobProvider } from '@react-pdf/renderer';\n\n//custom files\nimport downloadPDFFile from '../utils/downloadPDFFile.js';\nimport PDFDocument from './PDFDocument';\nimport PDFViewer from './PDFViewer';\nimport InputWrapper from './InputWrapper';\nimport * as CardConstants from './CardConstants.js';\n\n//wrapper for card editor section (including input + PDF)\n//needs to get via props, the currentCard and setter for changing currentCard properties\nfunction CardEditorWrapper(props){\n  const currentCard = props.currentCard;\n  const setCurrentCard = props.setCurrentCard;\n\n  //PDF document\n  const cardDocument = (\n    <PDFDocument\n      name={currentCard.name}\n      japaneseName={currentCard.japaneseName}\n      age={currentCard.age}\n      job={currentCard.job}\n      image={currentCard.image}\n    />\n  )\n\n  //returns a new card details object with newValue for newProp\n  const updateCurrentCard = (newProp, newValue) => {\n    return {\n      ...currentCard,\n      [newProp]: newValue\n    }\n  }\n\n  //event handlers for inputs\n  const handleInputChange = (e) => {\n    switch (e.target.name) {\n      case 'image':\n        const tempImage = (e.target.files[0]) ? URL.createObjectURL(e.target.files[0]) : CardConstants.defaultImage;\n        setCurrentCard(updateCurrentCard(\"image\", tempImage));\n        break;\n      case 'download':\n        downloadPDFFile(cardDocument, currentCard.name + \".pdf\");\n        break;\n      default:\n        setCurrentCard(updateCurrentCard(e.target.name, e.target.value));\n        break;\n    }\n  }\n\n  //return loading screen\n  const renderLoadingPreview = () => {\n    return (\n      <div className=\"PDFLoading\">\n        Loading preview...\n      </div>\n    )\n  }\n\n  //return PDF preview (in HTML)\n  const renderPDFPreview = () => {\n    return (\n      <div className=\"PDFLoading\">\n        <p>{currentCard.name}</p>\n        <p>{currentCard.japaneseName}</p>\n        <p>{currentCard.age}</p>\n        <p>{currentCard.job}</p>\n        <p>{currentCard.image}</p>\n      </div>\n    )\n  }\n\n  //PDF file is ready to have stuff done to it\n  const onPDFLoadSuccess = () => {\n    console.log('wooh');\n  }\n\n  const loadPDFFile = ({ blob, url, loading, error }) => {\n    if (!loading && !error && blob && url){\n      onPDFLoadSuccess();\n    }\n    return renderPDFPreview();\n  }\n\n  return (\n    <div>\n      <div className=\"PDFWrapper\" style={{\n        height: CardConstants.PDFDimensions.height * 2,\n        width: CardConstants.PDFDimensions.width * 2\n      }}>\n        <BlobProvider document={cardDocument}>\n          {loadPDFFile}\n        </BlobProvider>\n      </div>\n      <InputWrapper handleInputChange={handleInputChange}/>\n    </div>\n  );\n}\n\nexport default CardEditorWrapper;\n"]},"metadata":{},"sourceType":"module"}