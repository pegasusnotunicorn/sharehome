{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditorWrapper.js\";\nimport React, { useState, useReducer } from 'react'; //custom files\n\nimport CardEditorWrapper from '../CardEditor/CardEditorWrapper.js';\nimport * as CardConstants from '../CardEditor/CardConstants.js'; //reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, CardConstants.getDefaultCardObject()];\n\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item \"X\"\n        //or: you could look for a specific index\n        if (index === action.index) {\n          return false;\n        } //every other item stays\n\n\n        return true;\n      });\n\n    case 'update':\n      console.log('wtf');\n      return state.map((item, index) => {\n        //replace the item at index 2\n        if (index === action.index) {\n          console.log(action.card);\n          return action.card;\n        } //leave every other item unchanged\n\n\n        return item;\n      });\n\n    case 'reset':\n      return [CardConstants.getDefaultCardObject()];\n\n    default:\n      throw new Error();\n  }\n} //wrapper for card editor section (including input + PDF)\n\n\nfunction DeckEditorWrapper() {\n  const [cards, dispatch] = useReducer(reducer, [CardConstants.getDefaultCardObject()]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState(cards[currentIndex]); //updates the current card and updates it in the cards array\n\n  const updateCurrentCard = card => {\n    setCurrentCard(card);\n    dispatch({\n      type: 'update',\n      currentIndex,\n      card\n    });\n  }; //deletes all cards and resets index to 0\n\n\n  const resetAllCards = () => {\n    dispatch({\n      type: 'reset'\n    });\n    setCurrentIndex(0);\n    setCurrentCard(cards[currentIndex]);\n  }; //adds a new card and sets the index to last\n\n\n  const addNewCard = () => {\n    dispatch({\n      type: 'add'\n    });\n    setCurrentIndex(cards.length - 1);\n    setCurrentCard(cards[currentIndex]);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardEditorWrapper, {\n    currentCard: currentCard,\n    setCurrentCard: updateCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetAllCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Reset All\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNewCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Add New Card\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      console.log(cards);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"Log cards\"));\n}\n\nexport default DeckEditorWrapper;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditorWrapper.js"],"names":["React","useState","useReducer","CardEditorWrapper","CardConstants","reducer","state","action","type","getDefaultCardObject","filter","item","index","console","log","map","card","Error","DeckEditorWrapper","cards","dispatch","currentIndex","setCurrentIndex","currentCard","setCurrentCard","updateCurrentCard","resetAllCards","addNewCard","length"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react';\n\n//custom files\nimport CardEditorWrapper from '../CardEditor/CardEditorWrapper.js';\nimport * as CardConstants from '../CardEditor/CardConstants.js';\n\n//reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, CardConstants.getDefaultCardObject()];\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item \"X\"\n        //or: you could look for a specific index\n        if(index === action.index) {\n          return false;\n        }\n        //every other item stays\n        return true;\n      });\n    case 'update':\n    console.log('wtf');\n      return state.map((item, index) => {\n        //replace the item at index 2\n        if(index === action.index) {\n          console.log(action.card);\n          return action.card;\n        }\n        //leave every other item unchanged\n        return item;\n      });\n    case 'reset':\n      return [CardConstants.getDefaultCardObject()];\n    default:\n      throw new Error();\n  }\n}\n\n//wrapper for card editor section (including input + PDF)\nfunction DeckEditorWrapper(){\n  const [cards, dispatch] = useReducer(reducer, [CardConstants.getDefaultCardObject()]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [currentCard, setCurrentCard] = useState(cards[currentIndex]);\n\n  //updates the current card and updates it in the cards array\n  const updateCurrentCard = (card) => {\n    setCurrentCard(card);\n    dispatch({type: 'update', currentIndex, card});\n  }\n\n  //deletes all cards and resets index to 0\n  const resetAllCards = () => {\n    dispatch({ type: 'reset'});\n    setCurrentIndex(0);\n    setCurrentCard(cards[currentIndex]);\n  }\n\n  //adds a new card and sets the index to last\n  const addNewCard = () => {\n    dispatch({ type: 'add'});\n    setCurrentIndex(cards.length-1);\n    setCurrentCard(cards[currentIndex]);\n  }\n\n  return (\n    <div>\n      <CardEditorWrapper\n        currentCard={currentCard}\n        setCurrentCard={updateCurrentCard}\n      />\n      <button onClick={resetAllCards}>Reset All</button>\n      <button onClick={addNewCard}>Add New Card</button>\n      <button onClick={()=>{console.log(cards)}}>Log cards</button>\n    </div>\n  );\n}\n\nexport default DeckEditorWrapper;\n"]},"metadata":{},"sourceType":"module"}