{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/Designer/DeckEditor/DeckEditor.js\";\nimport React, { useState, useEffect } from 'react'; //custom files\n\nimport * as CardConstants from '../utils/CardConstants.js';\nimport DownloadPDFFile from '../PDFDocument/DownloadPDFFile.js';\nimport PDFDocument from '../PDFDocument/PDFDocument.js';\nimport CardPreview from './CardPreview.js';\nimport Sidebar from './Sidebar.js';\nimport CardEditor from '../CardEditor/CardEditor.js';\nimport { useStickyReducer } from '../utils/stickyHooks.js'; //reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.card];\n\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item at index\n        if (index === action.index) {\n          return false;\n        } // //remove item with property with value\n        // else if (item[action.property] === action.value){\n        //   return false;\n        // }\n        //every other item stays\n\n\n        return true;\n      });\n\n    case 'update':\n      return state.map((item, index) => {\n        //replace the item at index\n        if (index === action.index) {\n          return action.card;\n        } //leave every other item unchanged\n\n\n        return item;\n      });\n\n    case 'reset':\n      return [action.card];\n\n    default:\n      throw new Error();\n  }\n} //scroll to a cardPreview\n\n\nfunction scrollTo(index) {\n  let currentDOMPreview = document.getElementById(\"cardPreview\" + index);\n\n  if (!!currentDOMPreview) {\n    document.getElementById(\"cardPreview\" + index).scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }\n} //wrapper for card editor section (including input + PDF)\n\n\nlet currentCard = CardConstants.getDefaultCardObject();\n\nfunction DeckEditor() {\n  const [cards, dispatch] = useStickyReducer(reducer, [currentCard], \"cards\");\n  ;\n  const [currentIndex, setCurrentIndex] = useState(0); //updates the current card and updates it in the cards array\n\n  const updateCurrentCard = card => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    }); //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }; //download the PDF file\n\n\n  const downloadAllCards = () => {\n    DownloadPDFFile( /*#__PURE__*/React.createElement(PDFDocument, {\n      cards: cards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }), \"SHAREHOME_Deck.pdf\");\n  }; //deletes all cards and resets index to 0\n\n\n  const resetAllCards = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n    setCurrentIndex(0);\n  }; //adds a new card and sets the index to last\n\n\n  const addNewCard = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }; //deletes the current card and sets the index to last\n\n\n  const removeCurrentCard = () => {\n    const newLength = cards.length - 1; //if there are no more cards left, just reset\n\n    if (newLength <= 0) {\n      resetAllCards();\n    } else {\n      let newCurrentIndex = currentIndex - 1 <= 0 ? 0 : currentIndex - 1;\n      currentCard = cards[newCurrentIndex];\n      dispatch({\n        type: 'remove',\n        index: currentIndex\n      });\n      setCurrentIndex(newCurrentIndex);\n    }\n  }; //duplicates the current card and sets the index to it\n\n\n  const duplicateCurrentCard = () => {\n    currentCard = { ...currentCard\n    };\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }; //renders a specific card\n\n\n  const goToCard = cardIndex => {\n    setCurrentIndex(cardIndex);\n    currentCard = cards[cardIndex];\n    scrollTo(cardIndex);\n  }; //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n\n\n  const listOfCards = cards.map((step, move) => {\n    let cardPreviewProps = {\n      key: \"cardPreview\" + move,\n      id: \"cardPreview\" + move,\n      currentCard: step,\n      currentIndex: move,\n      handleClick: goToCard,\n      //current card is this button!\n      ifCurrentCard: move === currentIndex ? \" currentCard\" : \"\",\n      number: move === currentIndex ? \"EDITING\" : move + 1\n    };\n    return /*#__PURE__*/React.createElement(CardPreview, Object.assign({}, cardPreviewProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }));\n  }); //focus the current card in the preview pane\n\n  useEffect(() => {\n    scrollTo(currentIndex);\n  }, [cards, currentIndex]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardEditor, {\n    cards: cards,\n    currentCard: currentCard,\n    setCurrentCard: updateCurrentCard,\n    removeCurrentCard: removeCurrentCard,\n    duplicateCurrentCard: duplicateCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Sidebar, {\n    downloadAllCards: downloadAllCards,\n    resetAllCards: resetAllCards,\n    addNewCard: addNewCard,\n    currentCard: currentCard,\n    currentIndex: currentIndex,\n    cards: cards,\n    listOfCards: listOfCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default DeckEditor;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/Designer/DeckEditor/DeckEditor.js"],"names":["React","useState","useEffect","CardConstants","DownloadPDFFile","PDFDocument","CardPreview","Sidebar","CardEditor","useStickyReducer","reducer","state","action","type","card","filter","item","index","map","Error","scrollTo","currentDOMPreview","document","getElementById","scrollIntoView","behavior","currentCard","getDefaultCardObject","DeckEditor","cards","dispatch","currentIndex","setCurrentIndex","updateCurrentCard","downloadAllCards","resetAllCards","addNewCard","length","removeCurrentCard","newLength","newCurrentIndex","duplicateCurrentCard","goToCard","cardIndex","listOfCards","step","move","cardPreviewProps","key","id","handleClick","ifCurrentCard","number"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n//custom files\nimport * as CardConstants from '../utils/CardConstants.js';\nimport DownloadPDFFile from '../PDFDocument/DownloadPDFFile.js';\nimport PDFDocument from '../PDFDocument/PDFDocument.js';\nimport CardPreview from './CardPreview.js';\nimport Sidebar from './Sidebar.js';\nimport CardEditor from '../CardEditor/CardEditor.js';\nimport { useStickyReducer } from '../utils/stickyHooks.js';\n\n//reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.card];\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item at index\n        if(index === action.index) {\n          return false;\n        }\n        // //remove item with property with value\n        // else if (item[action.property] === action.value){\n        //   return false;\n        // }\n        //every other item stays\n        return true;\n      });\n    case 'update':\n      return state.map((item, index) => {\n        //replace the item at index\n        if(index === action.index) {\n          return action.card;\n        }\n        //leave every other item unchanged\n        return item;\n      });\n    case 'reset':\n      return [action.card];\n    default:\n      throw new Error();\n  }\n}\n\n//scroll to a cardPreview\nfunction scrollTo(index){\n  let currentDOMPreview = document.getElementById(\"cardPreview\"+index);\n  if (!!currentDOMPreview){\n    document.getElementById(\"cardPreview\"+index).scrollIntoView({behavior:\"smooth\"});\n  }\n}\n\n//wrapper for card editor section (including input + PDF)\nlet currentCard = CardConstants.getDefaultCardObject();\nfunction DeckEditor(){\n\n  const [cards, dispatch] = useStickyReducer(reducer, [currentCard], \"cards\");;\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  //updates the current card and updates it in the cards array\n  const updateCurrentCard = (card) => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    });\n\n    //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }\n\n  //download the PDF file\n  const downloadAllCards = () => {\n    DownloadPDFFile(<PDFDocument\n      cards={cards}\n    />, \"SHAREHOME_Deck.pdf\");\n  }\n\n  //deletes all cards and resets index to 0\n  const resetAllCards = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n    setCurrentIndex(0);\n  }\n\n  //adds a new card and sets the index to last\n  const addNewCard = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }\n\n  //deletes the current card and sets the index to last\n  const removeCurrentCard = () => {\n    const newLength = cards.length - 1;\n    //if there are no more cards left, just reset\n    if (newLength <= 0){\n      resetAllCards();\n    }\n    else {\n      let newCurrentIndex = (currentIndex - 1 <=0 ) ? 0 : currentIndex - 1;\n      currentCard = cards[newCurrentIndex];\n      dispatch({\n        type: 'remove',\n        index: currentIndex\n      });\n      setCurrentIndex(newCurrentIndex);\n    }\n  }\n\n  //duplicates the current card and sets the index to it\n  const duplicateCurrentCard = () => {\n    currentCard = {...currentCard};\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }\n\n  //renders a specific card\n  const goToCard = (cardIndex) => {\n    setCurrentIndex(cardIndex);\n    currentCard = cards[cardIndex];\n    scrollTo(cardIndex);\n  }\n\n  //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n  const listOfCards = cards.map((step, move) => {\n\n    let cardPreviewProps = {\n      key: \"cardPreview\" + move,\n      id : \"cardPreview\" + move,\n      currentCard: step,\n      currentIndex: move,\n      handleClick: goToCard,\n      //current card is this button!\n      ifCurrentCard : (move === currentIndex) ? \" currentCard\" : \"\",\n      number : (move === currentIndex) ? \"EDITING\" : move + 1,\n    }\n\n    return (<CardPreview {...cardPreviewProps}/>);\n  });\n\n  //focus the current card in the preview pane\n  useEffect(()=>{\n    scrollTo(currentIndex);\n  }, [cards, currentIndex]);\n\n  return (\n    <div>\n      <CardEditor\n        cards={cards}\n        currentCard={currentCard}\n        setCurrentCard={updateCurrentCard}\n        removeCurrentCard={removeCurrentCard}\n        duplicateCurrentCard={duplicateCurrentCard}\n      />\n      <Sidebar\n      downloadAllCards={downloadAllCards}\n      resetAllCards={resetAllCards}\n      addNewCard={addNewCard}\n      currentCard={currentCard}\n      currentIndex={currentIndex}\n      cards={cards}\n      listOfCards={listOfCards}\n      />\n    </div>\n  );\n}\n\nexport default DeckEditor;\n"]},"metadata":{},"sourceType":"module"}