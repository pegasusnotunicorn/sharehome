{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditorWrapper.js\";\nimport React, { useState, useReducer } from 'react'; //custom files\n\nimport CardEditorWrapper from '../CardEditor/CardEditorWrapper.js';\nimport * as CardEditorConstants from './CardEditorConstants.js'; //reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'remove', index, value, property })\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.item];\n\n    case 'remove':\n      return [...state.slice(0, action.index), ...state.slice(action.index + 1)];\n\n    case 'update':\n      let updatedItem = state[action.index];\n      updatedItem[action.property] = action.value;\n      return [...state.slice(0, action.index), updatedItem, ...state.slice(action.index + 1)];\n\n    case 'reset':\n      return [getDefaultCardObject()];\n\n    default:\n      throw new Error();\n  }\n} //wrapper for card editor section (including input + PDF)\n\n\nfunction DeckEditorWrapper() {\n  const [cards, dispatch] = useReducer(reducer, [getDefaultCardObject()]);\n  const [currentCard, setCurrentCard] = useState(cards[0]); //returns a new card details object with newValue for newProp\n\n  const updateCurrentCard = (newProp, newValue) => {\n    return { ...currentCard,\n      [newProp]: newValue\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardEditorWrapper, {\n    currentCard: currentCard,\n    setCurrentCard: setCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default DeckEditorWrapper;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditorWrapper.js"],"names":["React","useState","useReducer","CardEditorWrapper","CardEditorConstants","reducer","state","action","type","item","slice","index","updatedItem","property","value","getDefaultCardObject","Error","DeckEditorWrapper","cards","dispatch","currentCard","setCurrentCard","updateCurrentCard","newProp","newValue"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C,C,CAEA;;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAO,KAAKC,mBAAZ,MAAqC,0BAArC,C,CAEA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,aAAO,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACE,IAAlB,CAAP;;AACF,SAAK,QAAL;AACE,aAAO,CACL,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeH,MAAM,CAACI,KAAtB,CADE,EAEL,GAAGL,KAAK,CAACI,KAAN,CAAYH,MAAM,CAACI,KAAP,GAAe,CAA3B,CAFE,CAAP;;AAIF,SAAK,QAAL;AACE,UAAIC,WAAW,GAAGN,KAAK,CAACC,MAAM,CAACI,KAAR,CAAvB;AACAC,MAAAA,WAAW,CAACL,MAAM,CAACM,QAAR,CAAX,GAA+BN,MAAM,CAACO,KAAtC;AACA,aAAO,CACL,GAAGR,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeH,MAAM,CAACI,KAAtB,CADE,EAELC,WAFK,EAGL,GAAGN,KAAK,CAACI,KAAN,CAAYH,MAAM,CAACI,KAAP,GAAe,CAA3B,CAHE,CAAP;;AAKF,SAAK,OAAL;AACE,aAAO,CAACI,oBAAoB,EAArB,CAAP;;AACF;AACE,YAAM,IAAIC,KAAJ,EAAN;AAnBJ;AAqBD,C,CAED;;;AACA,SAASC,iBAAT,GAA4B;AAC1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,UAAU,CAACG,OAAD,EAAU,CAACU,oBAAoB,EAArB,CAAV,CAApC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAACiB,KAAK,CAAC,CAAD,CAAN,CAA9C,CAF0B,CAI1B;;AACA,QAAMI,iBAAiB,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;AAC/C,WAAO,EACL,GAAGJ,WADE;AAEL,OAACG,OAAD,GAAWC;AAFN,KAAP;AAID,GALD;;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AACE,IAAA,WAAW,EAAEJ,WADf;AAEE,IAAA,cAAc,EAAEC,cAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAQD;;AAED,eAAeJ,iBAAf","sourcesContent":["import React, { useState, useReducer } from 'react';\n\n//custom files\nimport CardEditorWrapper from '../CardEditor/CardEditorWrapper.js';\nimport * as CardEditorConstants from './CardEditorConstants.js';\n\n//reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'remove', index, value, property })\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.item];\n    case 'remove':\n      return [\n        ...state.slice(0, action.index),\n        ...state.slice(action.index + 1)\n      ];\n    case 'update':\n      let updatedItem = state[action.index];\n      updatedItem[action.property] = action.value;\n      return [\n        ...state.slice(0, action.index),\n        updatedItem,\n        ...state.slice(action.index + 1)\n      ]\n    case 'reset':\n      return [getDefaultCardObject()];\n    default:\n      throw new Error();\n  }\n}\n\n//wrapper for card editor section (including input + PDF)\nfunction DeckEditorWrapper(){\n  const [cards, dispatch] = useReducer(reducer, [getDefaultCardObject()]);\n  const [currentCard, setCurrentCard] = useState(cards[0]);\n\n  //returns a new card details object with newValue for newProp\n  const updateCurrentCard = (newProp, newValue) => {\n    return {\n      ...currentCard,\n      [newProp]: newValue\n    }\n  }\n\n  return (\n    <div>\n      <CardEditorWrapper\n        currentCard={currentCard}\n        setCurrentCard={setCurrentCard}\n      />\n    </div>\n  );\n}\n\nexport default DeckEditorWrapper;\n"]},"metadata":{},"sourceType":"module"}