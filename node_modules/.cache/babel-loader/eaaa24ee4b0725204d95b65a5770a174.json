{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/CardEditor/CardEditor.js\";\nimport React, { useState } from 'react';\nimport PDFDocument from '../DeckEditor/PDFDocument.js';\nimport { PDFViewer } from '@react-pdf/renderer'; //custom files\n\nimport { getImageObject, magnifyValue } from './CardConstants.js';\nimport CardViewer from './CardViewer.js';\nimport { viewerHeight, viewerWidth } from '../../css/CardViewerDynamicStyles.js';\nimport InputWrapper from './InputWrapper.js'; //get the X and Y coordinates of mouse inside the bounding rect\n\nfunction getMouseXY(e) {\n  let rect = e.currentTarget.getBoundingClientRect();\n  return {\n    x: e.clientX - rect.left,\n    //x position within the element.\n    y: e.clientY - rect.top //y position within the element.\n\n  };\n} //wrapper for card editor section (including input + PDF)\n//needs to get via props, the currentCard and setter for changing currentCard properties\n\n\nfunction CardEditor(props) {\n  const currentCard = props.currentCard;\n  const setCurrentCard = props.setCurrentCard; //returns a new card details object with newValue for newProp\n\n  const updateAndReturnCurrentCard = (newProp, newValue) => {\n    return { ...currentCard,\n      [newProp]: newValue\n    };\n  }; //event handlers for inputs\n\n\n  const handleInputChange = e => {\n    switch (e.target.name) {\n      case 'image':\n        if (e.target.files[0]) {\n          const tempImageURL = URL.createObjectURL(e.target.files[0]);\n          const tempImageName = e.target.files[0].name; //get new details (width / height) of uploaded image and generate a new image object\n\n          let img = new Image();\n\n          img.onload = function () {\n            let tempCard = updateAndReturnCurrentCard(\"image\", getImageObject(tempImageURL, tempImageName, img.width, img.height));\n            setCurrentCard(tempCard);\n          };\n\n          img.src = tempImageURL;\n        }\n\n        break;\n\n      default:\n        setCurrentCard(updateAndReturnCurrentCard(e.target.name, e.target.value));\n        break;\n    }\n  }; //handling image movement\n\n\n  const [startingCoords, setStartingCoords] = useState(false); //set starting coordinates on mouse down\n\n  const handleMouseDown = e => {\n    let mouseXY = getMouseXY(e);\n    setStartingCoords({\n      x: mouseXY.x,\n      y: mouseXY.y\n    });\n  };\n\n  const handleMouseUp = e => {\n    setStartingCoords(false);\n  };\n\n  const handleMouseMove = e => {\n    //if mouse down\n    if (startingCoords) {\n      let mouseXY = getMouseXY(e);\n      let deltaX = startingCoords.x - mouseXY.x;\n      let deltaY = startingCoords.y - mouseXY.y;\n      setStartingCoords({\n        x: mouseXY.x,\n        y: mouseXY.y\n      }); //dont let the image move outside of the bounds of the viewer\n\n      let newX = currentCard.image.viewerX - deltaX;\n      let newY = currentCard.image.viewerY - deltaY;\n      newX = newX > 0 ? 0 : newX;\n      newX = newX < -(currentCard.image.viewerWidth - viewerWidth) ? -(currentCard.image.viewerWidth - viewerWidth) : newX;\n      newY = newY > 0 ? 0 : newY;\n      newY = newY < -(currentCard.image.viewerHeight - viewerHeight) ? -(currentCard.image.viewerHeight - viewerHeight) : newY; //click to drag/move image\n\n      let tempCard = updateAndReturnCurrentCard(\"image\", { ...currentCard.image,\n        x: Math.round(newX / magnifyValue),\n        //need to round cuz react-pdf doesnt like decimals\n        y: Math.round(newY / magnifyValue),\n        viewerX: newX,\n        viewerY: newY\n      });\n      setCurrentCard(tempCard);\n    }\n  }; // //debug how PDF looks faster with PDFViewer built into browser, dont have to download file each time\n\n\n  let embeddedPDF = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"EmbeddedPDFViewer\",\n    style: {\n      width: viewerWidth,\n      height: viewerHeight,\n      outline: 0,\n      border: 0,\n      display: \"inline-block\",\n      backgroundColor: \"rgb(82, 86, 89)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  });\n\n  if (!startingCoords) {\n    embeddedPDF = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PDFViewer, {\n      className: \"EmbeddedPDFViewer\",\n      width: viewerWidth,\n      height: viewerHeight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(PDFDocument, {\n      cards: props.cards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardViewer, {\n    currentCard: currentCard,\n    textNoPointerEvent: startingCoords ? \"nopointerevent\" : \"\" //so we can move image while over text, but let text be clickable\n    ,\n    handleMouseDown: handleMouseDown,\n    handleMouseUp: handleMouseUp,\n    handleMouseMove: handleMouseMove,\n    handleInputChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(InputWrapper, {\n    currentCard: currentCard,\n    handleInputChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), embeddedPDF);\n}\n\nexport default CardEditor;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/CardEditor/CardEditor.js"],"names":["React","useState","PDFDocument","PDFViewer","getImageObject","magnifyValue","CardViewer","viewerHeight","viewerWidth","InputWrapper","getMouseXY","e","rect","currentTarget","getBoundingClientRect","x","clientX","left","y","clientY","top","CardEditor","props","currentCard","setCurrentCard","updateAndReturnCurrentCard","newProp","newValue","handleInputChange","target","name","files","tempImageURL","URL","createObjectURL","tempImageName","img","Image","onload","tempCard","width","height","src","value","startingCoords","setStartingCoords","handleMouseDown","mouseXY","handleMouseUp","handleMouseMove","deltaX","deltaY","newX","image","viewerX","newY","viewerY","Math","round","embeddedPDF","outline","border","display","backgroundColor","cards"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,SAAT,QAA0B,qBAA1B,C,CAEA;;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,oBAA7C;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,sCAA1C;AACA,OAAOC,YAAP,MAAyB,mBAAzB,C,CAEA;;AACA,SAASC,UAAT,CAAoBC,CAApB,EAAsB;AACpB,MAAIC,IAAI,GAAGD,CAAC,CAACE,aAAF,CAAgBC,qBAAhB,EAAX;AACA,SAAO;AACLC,IAAAA,CAAC,EAAEJ,CAAC,CAACK,OAAF,GAAYJ,IAAI,CAACK,IADf;AACqB;AAC1BC,IAAAA,CAAC,EAAEP,CAAC,CAACQ,OAAF,GAAYP,IAAI,CAACQ,GAFf,CAEqB;;AAFrB,GAAP;AAID,C,CAED;AACA;;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AACxB,QAAMC,WAAW,GAAGD,KAAK,CAACC,WAA1B;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACE,cAA7B,CAFwB,CAIxB;;AACA,QAAMC,0BAA0B,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACxD,WAAO,EACL,GAAGJ,WADE;AAEL,OAACG,OAAD,GAAWC;AAFN,KAAP;AAID,GALD,CALwB,CAYxB;;;AACA,QAAMC,iBAAiB,GAAIjB,CAAD,IAAO;AAC/B,YAAQA,CAAC,CAACkB,MAAF,CAASC,IAAjB;AACE,WAAK,OAAL;AACE,YAAInB,CAAC,CAACkB,MAAF,CAASE,KAAT,CAAe,CAAf,CAAJ,EAAsB;AACpB,gBAAMC,YAAY,GAAGC,GAAG,CAACC,eAAJ,CAAoBvB,CAAC,CAACkB,MAAF,CAASE,KAAT,CAAe,CAAf,CAApB,CAArB;AACA,gBAAMI,aAAa,GAAGxB,CAAC,CAACkB,MAAF,CAASE,KAAT,CAAe,CAAf,EAAkBD,IAAxC,CAFoB,CAIpB;;AACA,cAAIM,GAAG,GAAG,IAAIC,KAAJ,EAAV;;AACAD,UAAAA,GAAG,CAACE,MAAJ,GAAa,YAAY;AACvB,gBAAIC,QAAQ,GAAGd,0BAA0B,CAAC,OAAD,EAAUrB,cAAc,CAC/D4B,YAD+D,EAE/DG,aAF+D,EAG/DC,GAAG,CAACI,KAH2D,EAI/DJ,GAAG,CAACK,MAJ2D,CAAxB,CAAzC;AAMAjB,YAAAA,cAAc,CAACe,QAAD,CAAd;AACD,WARD;;AASAH,UAAAA,GAAG,CAACM,GAAJ,GAAUV,YAAV;AACD;;AACD;;AACF;AACER,QAAAA,cAAc,CAACC,0BAA0B,CAACd,CAAC,CAACkB,MAAF,CAASC,IAAV,EAAgBnB,CAAC,CAACkB,MAAF,CAASc,KAAzB,CAA3B,CAAd;AACA;AAtBJ;AAwBD,GAzBD,CAbwB,CAwCxB;;;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC5C,QAAQ,CAAC,KAAD,CAApD,CAzCwB,CA2CxB;;AACA,QAAM6C,eAAe,GAAInC,CAAD,IAAO;AAC7B,QAAIoC,OAAO,GAAGrC,UAAU,CAACC,CAAD,CAAxB;AACAkC,IAAAA,iBAAiB,CAAC;AAChB9B,MAAAA,CAAC,EAAEgC,OAAO,CAAChC,CADK;AAEhBG,MAAAA,CAAC,EAAE6B,OAAO,CAAC7B;AAFK,KAAD,CAAjB;AAID,GAND;;AAOA,QAAM8B,aAAa,GAAIrC,CAAD,IAAO;AAC3BkC,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,GAFD;;AAGA,QAAMI,eAAe,GAAItC,CAAD,IAAO;AAC7B;AACA,QAAIiC,cAAJ,EAAmB;AACjB,UAAIG,OAAO,GAAGrC,UAAU,CAACC,CAAD,CAAxB;AACA,UAAIuC,MAAM,GAAGN,cAAc,CAAC7B,CAAf,GAAmBgC,OAAO,CAAChC,CAAxC;AACA,UAAIoC,MAAM,GAAGP,cAAc,CAAC1B,CAAf,GAAmB6B,OAAO,CAAC7B,CAAxC;AAEA2B,MAAAA,iBAAiB,CAAC;AAChB9B,QAAAA,CAAC,EAAEgC,OAAO,CAAChC,CADK;AAEhBG,QAAAA,CAAC,EAAE6B,OAAO,CAAC7B;AAFK,OAAD,CAAjB,CALiB,CAUjB;;AACA,UAAIkC,IAAI,GAAG7B,WAAW,CAAC8B,KAAZ,CAAkBC,OAAlB,GAA4BJ,MAAvC;AACA,UAAIK,IAAI,GAAGhC,WAAW,CAAC8B,KAAZ,CAAkBG,OAAlB,GAA4BL,MAAvC;AACAC,MAAAA,IAAI,GAAIA,IAAI,GAAG,CAAR,GAAa,CAAb,GAAiBA,IAAxB;AACAA,MAAAA,IAAI,GAAIA,IAAI,GAAG,EAAE7B,WAAW,CAAC8B,KAAZ,CAAkB7C,WAAlB,GAAgCA,WAAlC,CAAR,GAA0D,EAAEe,WAAW,CAAC8B,KAAZ,CAAkB7C,WAAlB,GAAgCA,WAAlC,CAA1D,GAA2G4C,IAAlH;AACAG,MAAAA,IAAI,GAAIA,IAAI,GAAG,CAAR,GAAa,CAAb,GAAiBA,IAAxB;AACAA,MAAAA,IAAI,GAAIA,IAAI,GAAG,EAAEhC,WAAW,CAAC8B,KAAZ,CAAkB9C,YAAlB,GAAiCA,YAAnC,CAAR,GAA4D,EAAEgB,WAAW,CAAC8B,KAAZ,CAAkB9C,YAAlB,GAAiCA,YAAnC,CAA5D,GAA+GgD,IAAtH,CAhBiB,CAkBjB;;AACA,UAAIhB,QAAQ,GAAGd,0BAA0B,CAAC,OAAD,EAAU,EACjD,GAAGF,WAAW,CAAC8B,KADkC;AAEjDtC,QAAAA,CAAC,EAAE0C,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAC/C,YAAhB,CAF8C;AAEb;AACpCa,QAAAA,CAAC,EAAEuC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAClD,YAAhB,CAH8C;AAIjDiD,QAAAA,OAAO,EAAEF,IAJwC;AAKjDI,QAAAA,OAAO,EAAED;AALwC,OAAV,CAAzC;AAOA/B,MAAAA,cAAc,CAACe,QAAD,CAAd;AACD;AACF,GA9BD,CAtDwB,CAsFxB;;;AACA,MAAIoB,WAAW,gBACb;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAmC,IAAA,KAAK,EAAE;AACxCnB,MAAAA,KAAK,EAAEhC,WADiC;AAExCiC,MAAAA,MAAM,EAAElC,YAFgC;AAGxCqD,MAAAA,OAAO,EAAE,CAH+B;AAIxCC,MAAAA,MAAM,EAAE,CAJgC;AAKxCC,MAAAA,OAAO,EAAE,cAL+B;AAMxCC,MAAAA,eAAe,EAAE;AANuB,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;;AAUA,MAAI,CAACnB,cAAL,EAAoB;AAClBe,IAAAA,WAAW,gBACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,mBAArB;AAAyC,MAAA,KAAK,EAAEnD,WAAhD;AAA6D,MAAA,MAAM,EAAED,YAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAEe,KAAK,CAAC0C,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF;AAOD;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,WAAW,EAAEzC,WADf;AAEE,IAAA,kBAAkB,EAAGqB,cAAD,GAAmB,gBAAnB,GAAsC,EAF5D,CAEkE;AAFlE;AAGE,IAAA,eAAe,EAAEE,eAHnB;AAIE,IAAA,aAAa,EAAEE,aAJjB;AAKE,IAAA,eAAe,EAAEC,eALnB;AAME,IAAA,iBAAiB,EAAErB,iBANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAWE,oBAAC,YAAD;AACE,IAAA,WAAW,EAAEL,WADf;AAEE,IAAA,iBAAiB,EAAEK,iBAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAeG+B,WAfH,CADF;AAmBD;;AAED,eAAetC,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport PDFDocument from '../DeckEditor/PDFDocument.js';\nimport { PDFViewer } from '@react-pdf/renderer';\n\n//custom files\nimport { getImageObject, magnifyValue } from './CardConstants.js';\nimport CardViewer from './CardViewer.js';\nimport { viewerHeight, viewerWidth } from '../../css/CardViewerDynamicStyles.js';\nimport InputWrapper from './InputWrapper.js';\n\n//get the X and Y coordinates of mouse inside the bounding rect\nfunction getMouseXY(e){\n  let rect = e.currentTarget.getBoundingClientRect();\n  return {\n    x: e.clientX - rect.left, //x position within the element.\n    y: e.clientY - rect.top,  //y position within the element.\n  }\n}\n\n//wrapper for card editor section (including input + PDF)\n//needs to get via props, the currentCard and setter for changing currentCard properties\nfunction CardEditor(props){\n  const currentCard = props.currentCard;\n  const setCurrentCard = props.setCurrentCard;\n\n  //returns a new card details object with newValue for newProp\n  const updateAndReturnCurrentCard = (newProp, newValue) => {\n    return {\n      ...currentCard,\n      [newProp]: newValue\n    }\n  }\n\n  //event handlers for inputs\n  const handleInputChange = (e) => {\n    switch (e.target.name) {\n      case 'image':\n        if (e.target.files[0]){\n          const tempImageURL = URL.createObjectURL(e.target.files[0]);\n          const tempImageName = e.target.files[0].name;\n\n          //get new details (width / height) of uploaded image and generate a new image object\n          let img = new Image();\n          img.onload = function () {\n            let tempCard = updateAndReturnCurrentCard(\"image\", getImageObject(\n              tempImageURL,\n              tempImageName,\n              img.width,\n              img.height,\n            ));\n            setCurrentCard(tempCard);\n          };\n          img.src = tempImageURL;\n        }\n        break;\n      default:\n        setCurrentCard(updateAndReturnCurrentCard(e.target.name, e.target.value));\n        break;\n    }\n  }\n\n  //handling image movement\n  const [startingCoords, setStartingCoords] = useState(false);\n\n  //set starting coordinates on mouse down\n  const handleMouseDown = (e) => {\n    let mouseXY = getMouseXY(e);\n    setStartingCoords({\n      x: mouseXY.x,\n      y: mouseXY.y\n    });\n  }\n  const handleMouseUp = (e) => {\n    setStartingCoords(false);\n  }\n  const handleMouseMove = (e) => {\n    //if mouse down\n    if (startingCoords){\n      let mouseXY = getMouseXY(e);\n      let deltaX = startingCoords.x - mouseXY.x;\n      let deltaY = startingCoords.y - mouseXY.y;\n\n      setStartingCoords({\n        x: mouseXY.x,\n        y: mouseXY.y,\n      });\n\n      //dont let the image move outside of the bounds of the viewer\n      let newX = currentCard.image.viewerX - deltaX;\n      let newY = currentCard.image.viewerY - deltaY;\n      newX = (newX > 0) ? 0 : newX;\n      newX = (newX < -(currentCard.image.viewerWidth - viewerWidth)) ? -(currentCard.image.viewerWidth - viewerWidth) : newX;\n      newY = (newY > 0) ? 0 : newY;\n      newY = (newY < -(currentCard.image.viewerHeight - viewerHeight)) ? -(currentCard.image.viewerHeight - viewerHeight) : newY;\n\n      //click to drag/move image\n      let tempCard = updateAndReturnCurrentCard(\"image\", {\n        ...currentCard.image,\n        x: Math.round(newX/magnifyValue),   //need to round cuz react-pdf doesnt like decimals\n        y: Math.round(newY/magnifyValue),\n        viewerX: newX,\n        viewerY: newY,\n      });\n      setCurrentCard(tempCard);\n    }\n  }\n\n  // //debug how PDF looks faster with PDFViewer built into browser, dont have to download file each time\n  let embeddedPDF = (\n    <div className=\"EmbeddedPDFViewer\" style={{\n      width: viewerWidth,\n      height: viewerHeight,\n      outline: 0,\n      border: 0,\n      display: \"inline-block\",\n      backgroundColor: \"rgb(82, 86, 89)\",\n    }}></div>\n  )\n  if (!startingCoords){\n    embeddedPDF = (\n      <div>\n        <PDFViewer className=\"EmbeddedPDFViewer\" width={viewerWidth} height={viewerHeight}>\n          <PDFDocument cards={props.cards}/>\n        </PDFViewer>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <div>\n        <CardViewer\n          currentCard={currentCard}\n          textNoPointerEvent={(startingCoords) ? \"nopointerevent\" : \"\"}   //so we can move image while over text, but let text be clickable\n          handleMouseDown={handleMouseDown}\n          handleMouseUp={handleMouseUp}\n          handleMouseMove={handleMouseMove}\n          handleInputChange={handleInputChange}\n        />\n      </div>\n      <InputWrapper\n        currentCard={currentCard}\n        handleInputChange={handleInputChange}\n      />\n      {embeddedPDF}\n    </div>\n  );\n}\n\nexport default CardEditor;\n"]},"metadata":{},"sourceType":"module"}