{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditor.js\";\nimport React, { useState, useReducer, useEffect } from 'react'; //custom files\n\nimport * as CardConstants from '../utils/CardConstants.js';\nimport '../../css/deckEditor.css';\nimport { DebugButtons } from '../utils/DebugTools.js';\nimport CardPreview from './CardPreview.js';\nimport CardEditor from '../CardEditor/CardEditor.js'; //wrapper for card editor section (including input + PDF)\n\nfunction DeckEditor() {\n  const [cards, dispatch] = useReducer(reducer, [currentCard]);\n  const [currentIndex, setCurrentIndex] = useState(0); //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n\n  const listOfCards = cards.map((step, move) => {\n    let cardPreviewProps = {\n      key: \"cardPreview\" + move,\n      id: \"cardPreview\" + move,\n      currentCard: step,\n      currentIndex: move,\n      handleClick: goToCard,\n      //current card is this button!\n      ifCurrentCard: move === currentIndex ? \" currentCard\" : \"\",\n      number: move === currentIndex ? \"EDITING\" : move + 1\n    };\n    return /*#__PURE__*/React.createElement(CardPreview, Object.assign({}, cardPreviewProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }));\n  }); //focus the current card in the preview pane\n\n  useEffect(() => {\n    scrollTo(currentIndex);\n  }, [cards, currentIndex]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebarButtonWrapper sidebarContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sideBarButton\",\n    onClick: downloadAllCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"Download All Cards\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sideBarButton\",\n    onClick: resetAllCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, \"Reset All Cards\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sideBarButton\",\n    onClick: addNewCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, \"Add New Card\"), /*#__PURE__*/React.createElement(DebugButtons, {\n    currentCard: currentCard,\n    currentIndex: currentIndex,\n    cards: cards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cardPreviewWrapper sidebarContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, listOfCards)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardEditor, {\n    cards: cards,\n    currentCard: currentCard,\n    setCurrentCard: updateCurrentCard,\n    removeCurrentCard: removeCurrentCard,\n    duplicateCurrentCard: duplicateCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default DeckEditor;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditor.js"],"names":["React","useState","useReducer","useEffect","CardConstants","DebugButtons","CardPreview","CardEditor","DeckEditor","cards","dispatch","reducer","currentCard","currentIndex","setCurrentIndex","listOfCards","map","step","move","cardPreviewProps","key","id","handleClick","goToCard","ifCurrentCard","number","scrollTo","downloadAllCards","resetAllCards","addNewCard","updateCurrentCard","removeCurrentCard","duplicateCurrentCard"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect } from 'react';\n\n//custom files\nimport * as CardConstants from '../utils/CardConstants.js';\nimport '../../css/deckEditor.css';\nimport { DebugButtons } from '../utils/DebugTools.js';\nimport CardPreview from './CardPreview.js';\nimport CardEditor from '../CardEditor/CardEditor.js';\n\n//wrapper for card editor section (including input + PDF)\nfunction DeckEditor(){\n  const [cards, dispatch] = useReducer(reducer, [currentCard]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n  const listOfCards = cards.map((step, move) => {\n\n    let cardPreviewProps = {\n      key: \"cardPreview\" + move,\n      id : \"cardPreview\" + move,\n      currentCard: step,\n      currentIndex: move,\n      handleClick: goToCard,\n      //current card is this button!\n      ifCurrentCard : (move === currentIndex) ? \" currentCard\" : \"\",\n      number : (move === currentIndex) ? \"EDITING\" : move + 1,\n    }\n\n    return (<CardPreview {...cardPreviewProps}/>);\n  });\n\n\n\n  //focus the current card in the preview pane\n  useEffect(()=>{\n    scrollTo(currentIndex);\n  }, [cards, currentIndex]);\n\n  return (\n    <div>\n      <div className=\"sidebar\">\n        <div className=\"sidebarButtonWrapper sidebarContent\">\n          <button className=\"sideBarButton\" onClick={downloadAllCards}>Download All Cards</button>\n          <button className=\"sideBarButton\" onClick={resetAllCards}>Reset All Cards</button>\n          <button className=\"sideBarButton\" onClick={addNewCard}>Add New Card</button>\n          <DebugButtons\n            currentCard={currentCard}\n            currentIndex={currentIndex}\n            cards={cards}\n          />\n        </div>\n        <div className=\"cardPreviewWrapper sidebarContent\">\n          {listOfCards}\n        </div>\n      </div>\n      <div className=\"content\">\n        <CardEditor\n          cards={cards}\n          currentCard={currentCard}\n          setCurrentCard={updateCurrentCard}\n          removeCurrentCard={removeCurrentCard}\n          duplicateCurrentCard={duplicateCurrentCard}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default DeckEditor;\n"]},"metadata":{},"sourceType":"module"}