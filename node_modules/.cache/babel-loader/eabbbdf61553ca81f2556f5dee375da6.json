{"ast":null,"code":"import _objectSpread from\"/Users/1min/Documents/sharehome/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/1min/Documents/sharehome/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/Users/1min/Documents/sharehome/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React,{useEffect}from'react';//custom files\nimport*as CardConstants from'../utils/CardConstants.js';import DownloadPDFFile from'../PDFDocument/DownloadPDFFile.js';import PDFDocument from'../PDFDocument/PDFDocument.js';import CardPreview from'./CardPreview.js';import Sidebar from'./Sidebar.js';import CardEditor from'../CardEditor/CardEditor.js';import{useStickyState,useStickyReducer}from'../utils/stickyHooks.js';//reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\nfunction reducer(state,action){switch(action.type){case'add':return[].concat(_toConsumableArray(state),[action.card]);case'remove':return state.filter(function(item,index){//remove item at index\nif(index===action.index){return false;}// //remove item with property with value\n// else if (item[action.property] === action.value){\n//   return false;\n// }\n//every other item stays\nreturn true;});case'update':return state.map(function(item,index){//replace the item at index\nif(index===action.index){return action.card;}//leave every other item unchanged\nreturn item;});case'reset':return[action.card];default:throw new Error();}}//scroll to a cardPreview\nfunction scrollTo(index){var currentDOMPreview=document.getElementById(\"cardPreview\"+index);if(!!currentDOMPreview){document.getElementById(\"cardPreview\"+index).scrollIntoView({behavior:\"smooth\"});}}//current card using local storage if it exists\nvar currentCard=CardConstants.getDefaultCardObject();if(window.localStorage.currentIndex&&window.localStorage.cards){currentCard=JSON.parse(window.localStorage.cards)[JSON.parse(window.localStorage.currentIndex)];}//wrapper for card editor section (including input + PDF)\nfunction DeckEditor(props){var _useStickyReducer=useStickyReducer(reducer,[currentCard],\"cards\"),_useStickyReducer2=_slicedToArray(_useStickyReducer,2),cards=_useStickyReducer2[0],dispatch=_useStickyReducer2[1];;var _useStickyState=useStickyState(0,\"currentIndex\"),_useStickyState2=_slicedToArray(_useStickyState,2),currentIndex=_useStickyState2[0],setCurrentIndex=_useStickyState2[1];//updates the current card and updates it in the cards array\nvar updateCurrentCard=function updateCurrentCard(card){currentCard=card;dispatch({type:'update',index:currentIndex,card:currentCard});//if i want to implement an undo, i have access to what the card WAS here\n//just need to keep this in an array and access it whenever\n// console.log(cards[currentIndex]);\n};//download the PDF file\nvar downloadAllCards=function downloadAllCards(){DownloadPDFFile(/*#__PURE__*/React.createElement(PDFDocument,{cards:cards}),\"SHAREHOME_Deck.pdf\");};//deletes all cards and resets index to 0\nvar resetAllCards=function resetAllCards(){currentCard=CardConstants.getDefaultCardObject();dispatch({type:'reset',card:currentCard});setCurrentIndex(0);};//adds a new card and sets the index to last\nvar addNewCard=function addNewCard(){currentCard=CardConstants.getDefaultCardObject();dispatch({type:'add',card:currentCard});setCurrentIndex(cards.length);};//deletes the current card and sets the index to last\nvar removeCurrentCard=function removeCurrentCard(){var newLength=cards.length-1;//if there are no more cards left, just reset\nif(newLength<=0){resetAllCards();}else{var newCurrentIndex=currentIndex-1<=0?0:currentIndex-1;currentCard=cards[newCurrentIndex];dispatch({type:'remove',index:currentIndex});setCurrentIndex(newCurrentIndex);}};//duplicates the current card and sets the index to it\nvar duplicateCurrentCard=function duplicateCurrentCard(){currentCard=_objectSpread({},currentCard);dispatch({type:'add',card:currentCard});setCurrentIndex(cards.length);};//renders a specific card\nvar goToCard=function goToCard(cardIndex){setCurrentIndex(cardIndex);currentCard=cards[cardIndex];scrollTo(cardIndex);};//renders a list of buttons to keep track of all cards in the deck (click to go to it)\nvar listOfCards=cards.map(function(step,move){var cardPreviewProps={key:\"cardPreview\"+move,id:\"cardPreview\"+move,currentCard:step,currentIndex:move,handleClick:goToCard,//current card is this button!\nifCurrentCard:move===currentIndex?\" currentCard\":\"\",number:move===currentIndex?\"EDITING\":move+1};return/*#__PURE__*/React.createElement(CardPreview,cardPreviewProps);});//focus the current card in the preview pane\nuseEffect(function(){scrollTo(currentIndex);},[cards,currentIndex]);return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(CardEditor,{cards:cards,currentCard:currentCard,setCurrentCard:updateCurrentCard,removeCurrentCard:removeCurrentCard,duplicateCurrentCard:duplicateCurrentCard,viewerMagnifyValue:props.viewerMagnifyValue}),/*#__PURE__*/React.createElement(Sidebar,{downloadAllCards:downloadAllCards,resetAllCards:resetAllCards,addNewCard:addNewCard,currentCard:currentCard,currentIndex:currentIndex,cards:cards,listOfCards:listOfCards}));}export default DeckEditor;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/Designer/DeckEditor/DeckEditor.js"],"names":["React","useEffect","CardConstants","DownloadPDFFile","PDFDocument","CardPreview","Sidebar","CardEditor","useStickyState","useStickyReducer","reducer","state","action","type","card","filter","item","index","map","Error","scrollTo","currentDOMPreview","document","getElementById","scrollIntoView","behavior","currentCard","getDefaultCardObject","window","localStorage","currentIndex","cards","JSON","parse","DeckEditor","props","dispatch","setCurrentIndex","updateCurrentCard","downloadAllCards","resetAllCards","addNewCard","length","removeCurrentCard","newLength","newCurrentIndex","duplicateCurrentCard","goToCard","cardIndex","listOfCards","step","move","cardPreviewProps","key","id","handleClick","ifCurrentCard","number","viewerMagnifyValue"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\n\n//custom files\nimport * as CardConstants from '../utils/CardConstants.js';\nimport DownloadPDFFile from '../PDFDocument/DownloadPDFFile.js';\nimport PDFDocument from '../PDFDocument/PDFDocument.js';\nimport CardPreview from './CardPreview.js';\nimport Sidebar from './Sidebar.js';\nimport CardEditor from '../CardEditor/CardEditor.js';\nimport { useStickyState, useStickyReducer } from '../utils/stickyHooks.js';\n\n//reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.card];\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item at index\n        if(index === action.index) {\n          return false;\n        }\n        // //remove item with property with value\n        // else if (item[action.property] === action.value){\n        //   return false;\n        // }\n        //every other item stays\n        return true;\n      });\n    case 'update':\n      return state.map((item, index) => {\n        //replace the item at index\n        if(index === action.index) {\n          return action.card;\n        }\n        //leave every other item unchanged\n        return item;\n      });\n    case 'reset':\n      return [action.card];\n    default:\n      throw new Error();\n  }\n}\n\n//scroll to a cardPreview\nfunction scrollTo(index){\n  let currentDOMPreview = document.getElementById(\"cardPreview\"+index);\n  if (!!currentDOMPreview){\n    document.getElementById(\"cardPreview\"+index).scrollIntoView({behavior:\"smooth\"});\n  }\n}\n\n//current card using local storage if it exists\nlet currentCard = CardConstants.getDefaultCardObject();\nif (window.localStorage.currentIndex && window.localStorage.cards){\n  currentCard = JSON.parse(window.localStorage.cards)[JSON.parse(window.localStorage.currentIndex)];\n}\n\n//wrapper for card editor section (including input + PDF)\nfunction DeckEditor(props){\n  const [cards, dispatch] = useStickyReducer(reducer, [currentCard], \"cards\");;\n  const [currentIndex, setCurrentIndex] = useStickyState(0, \"currentIndex\");\n\n  //updates the current card and updates it in the cards array\n  const updateCurrentCard = (card) => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    });\n\n    //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }\n\n  //download the PDF file\n  const downloadAllCards = () => {\n    DownloadPDFFile(<PDFDocument\n      cards={cards}\n    />, \"SHAREHOME_Deck.pdf\");\n  }\n\n  //deletes all cards and resets index to 0\n  const resetAllCards = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n    setCurrentIndex(0);\n  }\n\n  //adds a new card and sets the index to last\n  const addNewCard = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }\n\n  //deletes the current card and sets the index to last\n  const removeCurrentCard = () => {\n    const newLength = cards.length - 1;\n    //if there are no more cards left, just reset\n    if (newLength <= 0){\n      resetAllCards();\n    }\n    else {\n      let newCurrentIndex = (currentIndex - 1 <=0 ) ? 0 : currentIndex - 1;\n      currentCard = cards[newCurrentIndex];\n      dispatch({\n        type: 'remove',\n        index: currentIndex\n      });\n      setCurrentIndex(newCurrentIndex);\n    }\n  }\n\n  //duplicates the current card and sets the index to it\n  const duplicateCurrentCard = () => {\n    currentCard = {...currentCard};\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }\n\n  //renders a specific card\n  const goToCard = (cardIndex) => {\n    setCurrentIndex(cardIndex);\n    currentCard = cards[cardIndex];\n    scrollTo(cardIndex);\n  }\n\n  //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n  const listOfCards = cards.map((step, move) => {\n\n    let cardPreviewProps = {\n      key: \"cardPreview\" + move,\n      id : \"cardPreview\" + move,\n      currentCard: step,\n      currentIndex: move,\n      handleClick: goToCard,\n      //current card is this button!\n      ifCurrentCard : (move === currentIndex) ? \" currentCard\" : \"\",\n      number : (move === currentIndex) ? \"EDITING\" : move + 1,\n    }\n\n    return (<CardPreview {...cardPreviewProps}/>);\n  });\n\n  //focus the current card in the preview pane\n  useEffect(()=>{\n    scrollTo(currentIndex);\n  }, [cards, currentIndex]);\n\n  return (\n    <div>\n      <CardEditor\n        cards={cards}\n        currentCard={currentCard}\n        setCurrentCard={updateCurrentCard}\n        removeCurrentCard={removeCurrentCard}\n        duplicateCurrentCard={duplicateCurrentCard}\n        viewerMagnifyValue={props.viewerMagnifyValue}\n      />\n      <Sidebar\n      downloadAllCards={downloadAllCards}\n      resetAllCards={resetAllCards}\n      addNewCard={addNewCard}\n      currentCard={currentCard}\n      currentIndex={currentIndex}\n      cards={cards}\n      listOfCards={listOfCards}\n      />\n    </div>\n  );\n}\n\nexport default DeckEditor;\n"]},"metadata":{},"sourceType":"module"}