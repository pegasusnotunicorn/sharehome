{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/CardEditor/CardEditorWrapper.js\";\nimport React from 'react';\nimport { BlobProvider } from '@react-pdf/renderer'; //custom files\n\nimport downloadPDFFile from '../utils/downloadPDFFile.js';\nimport PDFDocument from './PDFDocument.js';\nimport PDFViewer from './PDFViewer.js';\nimport InputWrapper from './InputWrapper.js';\nimport * as CardConstants from './CardConstants.js'; //wrapper for card editor section (including input + PDF)\n//needs to get via props, the currentCard and setter for changing currentCard properties\n\nfunction CardEditorWrapper(props) {\n  const currentCard = props.currentCard;\n  const setCurrentCard = props.setCurrentCard; //PDF document\n\n  const cardDocument = /*#__PURE__*/React.createElement(PDFDocument, {\n    currentCard: currentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }); //returns a new card details object with newValue for newProp\n\n  const updateCurrentCard = (newProp, newValue) => {\n    return { ...currentCard,\n      [newProp]: newValue\n    };\n  }; //event handlers for inputs\n\n\n  const handleInputChange = e => {\n    switch (e.target.name) {\n      case 'image':\n        const tempImage = e.target.files[0] ? URL.createObjectURL(e.target.files[0]) : CardConstants.defaultImage;\n        const tempImageName = e.target.files[0] ? e.target.files[0].name : CardConstants.defaultImage;\n        let tempCard = updateCurrentCard(\"image\", tempImage);\n        console.log(tempCard);\n        tempCard = updateCurrentCard(\"imageName\", tempImageName);\n        console.log(tempCard);\n        setCurrentCard(tempCard);\n        break;\n\n      case 'download':\n        downloadPDFFile(cardDocument, currentCard.name + \".pdf\");\n        break;\n\n      default:\n        setCurrentCard(updateCurrentCard(e.target.name, e.target.value));\n        break;\n    }\n  }; // //return loading screen\n  // const renderLoadingPreview = () => {\n  //   return (\n  //     <div className=\"PDFLoading\">\n  //       Loading preview...\n  //     </div>\n  //   )\n  // }\n  //PDF file is ready to have stuff done to it\n\n\n  const onPDFLoadSuccess = () => {\n    console.log('wooh');\n  };\n\n  const loadPDFFile = ({\n    blob,\n    url,\n    loading,\n    error\n  }) => {\n    if (!loading && !error && blob && url) {\n      onPDFLoadSuccess();\n    }\n\n    return /*#__PURE__*/React.createElement(PDFViewer, {\n      currentCard: currentCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BlobProvider, {\n    document: cardDocument,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, loadPDFFile)), /*#__PURE__*/React.createElement(InputWrapper, {\n    handleInputChange: handleInputChange,\n    currentCard: currentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default CardEditorWrapper;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/CardEditor/CardEditorWrapper.js"],"names":["React","BlobProvider","downloadPDFFile","PDFDocument","PDFViewer","InputWrapper","CardConstants","CardEditorWrapper","props","currentCard","setCurrentCard","cardDocument","updateCurrentCard","newProp","newValue","handleInputChange","e","target","name","tempImage","files","URL","createObjectURL","defaultImage","tempImageName","tempCard","console","log","value","onPDFLoadSuccess","loadPDFFile","blob","url","loading","error"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { BlobProvider } from '@react-pdf/renderer';\n\n//custom files\nimport downloadPDFFile from '../utils/downloadPDFFile.js';\nimport PDFDocument from './PDFDocument.js';\nimport PDFViewer from './PDFViewer.js';\nimport InputWrapper from './InputWrapper.js';\nimport * as CardConstants from './CardConstants.js';\n\n//wrapper for card editor section (including input + PDF)\n//needs to get via props, the currentCard and setter for changing currentCard properties\nfunction CardEditorWrapper(props){\n  const currentCard = props.currentCard;\n  const setCurrentCard = props.setCurrentCard;\n\n  //PDF document\n  const cardDocument = (\n    <PDFDocument\n      currentCard={currentCard}\n    />\n  )\n\n  //returns a new card details object with newValue for newProp\n  const updateCurrentCard = (newProp, newValue) => {\n    return {\n      ...currentCard,\n      [newProp]: newValue\n    }\n  }\n\n  //event handlers for inputs\n  const handleInputChange = (e) => {\n    switch (e.target.name) {\n      case 'image':\n        const tempImage = (e.target.files[0]) ? URL.createObjectURL(e.target.files[0]) : CardConstants.defaultImage;\n        const tempImageName = (e.target.files[0]) ? e.target.files[0].name : CardConstants.defaultImage;\n\n        let tempCard = updateCurrentCard(\"image\", tempImage);\n        console.log(tempCard);\n        tempCard = updateCurrentCard(\"imageName\", tempImageName);\n        console.log(tempCard);\n\n        setCurrentCard(tempCard);\n        break;\n      case 'download':\n        downloadPDFFile(cardDocument, currentCard.name + \".pdf\");\n        break;\n      default:\n        setCurrentCard(updateCurrentCard(e.target.name, e.target.value));\n        break;\n    }\n  }\n\n  // //return loading screen\n  // const renderLoadingPreview = () => {\n  //   return (\n  //     <div className=\"PDFLoading\">\n  //       Loading preview...\n  //     </div>\n  //   )\n  // }\n\n  //PDF file is ready to have stuff done to it\n  const onPDFLoadSuccess = () => {\n    console.log('wooh');\n  }\n\n  const loadPDFFile = ({ blob, url, loading, error }) => {\n    if (!loading && !error && blob && url){\n      onPDFLoadSuccess();\n    }\n    return (\n      <PDFViewer currentCard={currentCard} />\n    )\n  }\n\n  return (\n    <div>\n      <div>\n        <BlobProvider document={cardDocument}>\n          {loadPDFFile}\n        </BlobProvider>\n      </div>\n      <InputWrapper\n        handleInputChange={handleInputChange}\n        currentCard={currentCard}\n      />\n    </div>\n  );\n}\n\nexport default CardEditorWrapper;\n"]},"metadata":{},"sourceType":"module"}