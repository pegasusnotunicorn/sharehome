{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/Designer/CardEditor/CardEditor.js\";\nimport React, { useState } from 'react'; //custom files\n\nimport { getImageObject, PDFDimensions, viewerMagnifyValue } from '../utils/CardConstants.js';\nimport CardViewer from './CardViewer.js';\nimport CardButtons from './CardButtons.js';\nimport { DebugPDFViewer } from '../utils/DebugTools.js';\nimport '../../css/Designer/cardEditor.css'; //get the X and Y coordinates of mouse inside the bounding rect divided by magnifyValue\n\nfunction getMouseXY(e) {\n  let rect = e.currentTarget.getBoundingClientRect();\n  return {\n    x: (e.clientX - rect.left) / viewerMagnifyValue,\n    //x position within the element.\n    y: (e.clientY - rect.top) / viewerMagnifyValue //y position within the element.\n\n  };\n} //wrapper for card editor section (including input + PDF)\n//needs to get via props, the currentCard and setter for changing currentCard properties\n\n\nfunction CardEditor(props) {\n  const currentCard = props.currentCard;\n  const setCurrentCard = props.setCurrentCard; //returns a new card details object with newValue for newProp\n\n  const updateAndReturnCurrentCard = (newProp, newValue) => {\n    return { ...currentCard,\n      [newProp]: newValue\n    };\n  }; //event handlers for inputs\n\n\n  const handleInputChange = e => {\n    switch (e.target.name) {\n      case 'image':\n        if (e.target.files[0]) {\n          const tempImageURL = URL.createObjectURL(e.target.files[0]);\n          const tempImageName = e.target.files[0].name; //get new details (width / height) of uploaded image and generate a new image object\n\n          let img = new Image();\n\n          img.onload = function () {\n            let tempCard = updateAndReturnCurrentCard(\"image\", getImageObject(tempImageURL, tempImageName, img.width, img.height));\n            setCurrentCard(tempCard);\n          };\n\n          img.src = tempImageURL;\n        }\n\n        break;\n\n      default:\n        setCurrentCard(updateAndReturnCurrentCard(e.target.name, e.target.value));\n        break;\n    }\n  }; //handling image movement\n\n\n  const [startingCoords, setStartingCoords] = useState(false); //set starting coordinates on mouse down\n\n  const handleMouseDown = e => {\n    let mouseXY = getMouseXY(e);\n    setStartingCoords({\n      x: mouseXY.x,\n      y: mouseXY.y\n    });\n  };\n\n  const handleMouseUp = e => {\n    setStartingCoords(false);\n  };\n\n  const handleMouseMove = e => {\n    //if mouse down\n    if (startingCoords) {\n      let mouseXY = getMouseXY(e);\n      let deltaX = startingCoords.x - mouseXY.x;\n      let deltaY = startingCoords.y - mouseXY.y;\n      setStartingCoords({\n        x: mouseXY.x,\n        y: mouseXY.y\n      }); //dont let the image move outside of the bounds of the viewer\n\n      let newX = currentCard.image.x - deltaX;\n      let newY = currentCard.image.y - deltaY;\n      let rightBound = -(currentCard.image.width - PDFDimensions.width);\n      let botBound = -(currentCard.image.height - PDFDimensions.height);\n      newX = newX > 0 ? 0 : newX; //prevent dragging to the right past left bound\n\n      newX = newX < rightBound ? rightBound : newX; //prevent dragging to the left past right bound\n\n      newY = newY > 0 ? 0 : newY; //prevent dragging to the bottom past top bound\n\n      newY = newY < botBound ? botBound : newY; //prevent dragging to the top past bottom bound\n      //click to drag/move image\n\n      let tempCard = updateAndReturnCurrentCard(\"image\", { ...currentCard.image,\n        x: Math.round(newX),\n        y: Math.round(newY)\n      });\n      setCurrentCard(tempCard);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardViewer, {\n    currentCard: currentCard,\n    textNoPointerEvent: startingCoords ? \"nopointerevent\" : \"\" //so we can move image while over text, but let text be clickable\n    ,\n    handleMouseDown: handleMouseDown,\n    handleMouseUp: handleMouseUp,\n    handleMouseMove: handleMouseMove,\n    handleInputChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardButtons, {\n    handleInputChange: handleInputChange,\n    removeCurrentCard: props.removeCurrentCard,\n    duplicateCurrentCard: props.duplicateCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DebugPDFViewer, {\n    startingCoords: startingCoords,\n    cards: props.cards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default CardEditor;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/Designer/CardEditor/CardEditor.js"],"names":["React","useState","getImageObject","PDFDimensions","viewerMagnifyValue","CardViewer","CardButtons","DebugPDFViewer","getMouseXY","e","rect","currentTarget","getBoundingClientRect","x","clientX","left","y","clientY","top","CardEditor","props","currentCard","setCurrentCard","updateAndReturnCurrentCard","newProp","newValue","handleInputChange","target","name","files","tempImageURL","URL","createObjectURL","tempImageName","img","Image","onload","tempCard","width","height","src","value","startingCoords","setStartingCoords","handleMouseDown","mouseXY","handleMouseUp","handleMouseMove","deltaX","deltaY","newX","image","newY","rightBound","botBound","Math","round","removeCurrentCard","duplicateCurrentCard","cards"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\n//custom files\nimport { getImageObject, PDFDimensions, viewerMagnifyValue } from '../utils/CardConstants.js';\nimport CardViewer from './CardViewer.js';\nimport CardButtons from './CardButtons.js';\nimport { DebugPDFViewer } from '../utils/DebugTools.js';\nimport '../../css/Designer/cardEditor.css';\n\n//get the X and Y coordinates of mouse inside the bounding rect divided by magnifyValue\nfunction getMouseXY(e){\n  let rect = e.currentTarget.getBoundingClientRect();\n  return {\n    x: (e.clientX - rect.left) / viewerMagnifyValue, //x position within the element.\n    y: (e.clientY - rect.top) / viewerMagnifyValue,  //y position within the element.\n  }\n}\n\n//wrapper for card editor section (including input + PDF)\n//needs to get via props, the currentCard and setter for changing currentCard properties\nfunction CardEditor(props){\n  const currentCard = props.currentCard;\n  const setCurrentCard = props.setCurrentCard;\n\n  //returns a new card details object with newValue for newProp\n  const updateAndReturnCurrentCard = (newProp, newValue) => {\n    return {\n      ...currentCard,\n      [newProp]: newValue\n    }\n  }\n\n  //event handlers for inputs\n  const handleInputChange = (e) => {\n    switch (e.target.name) {\n      case 'image':\n        if (e.target.files[0]){\n          const tempImageURL = URL.createObjectURL(e.target.files[0]);\n          const tempImageName = e.target.files[0].name;\n\n          //get new details (width / height) of uploaded image and generate a new image object\n          let img = new Image();\n          img.onload = function () {\n            let tempCard = updateAndReturnCurrentCard(\"image\", getImageObject(\n              tempImageURL,\n              tempImageName,\n              img.width,\n              img.height,\n            ));\n            setCurrentCard(tempCard);\n          };\n          img.src = tempImageURL;\n        }\n        break;\n      default:\n        setCurrentCard(updateAndReturnCurrentCard(e.target.name, e.target.value));\n        break;\n    }\n  }\n\n  //handling image movement\n  const [startingCoords, setStartingCoords] = useState(false);\n\n  //set starting coordinates on mouse down\n  const handleMouseDown = (e) => {\n    let mouseXY = getMouseXY(e);\n    setStartingCoords({\n      x: mouseXY.x,\n      y: mouseXY.y\n    });\n  }\n  const handleMouseUp = (e) => {\n    setStartingCoords(false);\n  }\n  const handleMouseMove = (e) => {\n    //if mouse down\n    if (startingCoords){\n      let mouseXY = getMouseXY(e);\n      let deltaX = startingCoords.x - mouseXY.x;\n      let deltaY = startingCoords.y - mouseXY.y;\n\n      setStartingCoords({\n        x: mouseXY.x,\n        y: mouseXY.y,\n      });\n\n      //dont let the image move outside of the bounds of the viewer\n      let newX = currentCard.image.x - deltaX;\n      let newY = currentCard.image.y - deltaY;\n      let rightBound = -(currentCard.image.width - PDFDimensions.width);\n      let botBound = -(currentCard.image.height - PDFDimensions.height);\n\n      newX = (newX > 0) ? 0 : newX;     //prevent dragging to the right past left bound\n      newX = (newX < rightBound) ? rightBound : newX; //prevent dragging to the left past right bound\n      newY = (newY > 0) ? 0 : newY;     //prevent dragging to the bottom past top bound\n      newY = (newY < botBound) ? botBound : newY; //prevent dragging to the top past bottom bound\n\n      //click to drag/move image\n      let tempCard = updateAndReturnCurrentCard(\"image\", {\n        ...currentCard.image,\n        x: Math.round(newX),\n        y: Math.round(newY),\n      });\n      setCurrentCard(tempCard);\n    }\n  }\n\n  return (\n    <div className=\"content\">\n      <CardViewer\n        currentCard={currentCard}\n        textNoPointerEvent={(startingCoords) ? \"nopointerevent\" : \"\"}   //so we can move image while over text, but let text be clickable\n        handleMouseDown={handleMouseDown}\n        handleMouseUp={handleMouseUp}\n        handleMouseMove={handleMouseMove}\n        handleInputChange={handleInputChange}\n      />\n      <CardButtons\n        handleInputChange={handleInputChange}\n        removeCurrentCard={props.removeCurrentCard}\n        duplicateCurrentCard={props.duplicateCurrentCard}\n      />\n      <DebugPDFViewer\n        startingCoords={startingCoords}\n        cards={props.cards}\n      />\n    </div>\n  );\n}\n\nexport default CardEditor;\n"]},"metadata":{},"sourceType":"module"}