{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditorWrapper.js\";\nimport React, { useState, useReducer } from 'react'; //custom files\n\nimport CardEditorWrapper from '../CardEditor/CardEditorWrapper.js';\nimport * as CardConstants from '../CardEditor/CardConstants.js'; //reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'remove', index, value, property })\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, CardConstants.getDefaultCardObject()];\n\n    case 'remove':\n      return [...state.slice(0, action.index), ...state.slice(action.index + 1)];\n\n    case 'update':\n      let updatedItem = state[action.index];\n      updatedItem[action.property] = action.value;\n      return [...state.slice(0, action.index), updatedItem, ...state.slice(action.index + 1)];\n\n    case 'reset':\n      return [CardConstants.getDefaultCardObject()];\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction resetAllCards() {\n  dispatch({\n    type: 'reset'\n  });\n  setCurrentCard(cards[0]);\n}\n\nfunction addNewCard() {\n  dispatch({\n    type: 'add'\n  });\n  setCurrentCard(cards[card.length - 1]);\n} //wrapper for card editor section (including input + PDF)\n\n\nfunction DeckEditorWrapper() {\n  const [cards, dispatch] = useReducer(reducer, [CardConstants.getDefaultCardObject()]);\n  const [currentCard, setCurrentCard] = useState(cards[0]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardEditorWrapper, {\n    currentCard: currentCard,\n    setCurrentCard: setCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetAllCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"Reset All\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNewCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Add New Card\"));\n}\n\nexport default DeckEditorWrapper;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditorWrapper.js"],"names":["React","useState","useReducer","CardEditorWrapper","CardConstants","reducer","state","action","type","getDefaultCardObject","slice","index","updatedItem","property","value","Error","resetAllCards","dispatch","setCurrentCard","cards","addNewCard","card","length","DeckEditorWrapper","currentCard"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C,C,CAEA;;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAO,KAAKC,aAAZ,MAA+B,gCAA/B,C,CAEA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,aAAO,CAAC,GAAGF,KAAJ,EAAWF,aAAa,CAACK,oBAAd,EAAX,CAAP;;AACF,SAAK,QAAL;AACE,aAAO,CACL,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeH,MAAM,CAACI,KAAtB,CADE,EAEL,GAAGL,KAAK,CAACI,KAAN,CAAYH,MAAM,CAACI,KAAP,GAAe,CAA3B,CAFE,CAAP;;AAIF,SAAK,QAAL;AACE,UAAIC,WAAW,GAAGN,KAAK,CAACC,MAAM,CAACI,KAAR,CAAvB;AACAC,MAAAA,WAAW,CAACL,MAAM,CAACM,QAAR,CAAX,GAA+BN,MAAM,CAACO,KAAtC;AACA,aAAO,CACL,GAAGR,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeH,MAAM,CAACI,KAAtB,CADE,EAELC,WAFK,EAGL,GAAGN,KAAK,CAACI,KAAN,CAAYH,MAAM,CAACI,KAAP,GAAe,CAA3B,CAHE,CAAP;;AAKF,SAAK,OAAL;AACE,aAAO,CAACP,aAAa,CAACK,oBAAd,EAAD,CAAP;;AACF;AACE,YAAM,IAAIM,KAAJ,EAAN;AAnBJ;AAqBD;;AAED,SAASC,aAAT,GAAwB;AACtBC,EAAAA,QAAQ,CAAC;AAAET,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;AACAU,EAAAA,cAAc,CAACC,KAAK,CAAC,CAAD,CAAN,CAAd;AACD;;AAED,SAASC,UAAT,GAAqB;AACnBH,EAAAA,QAAQ,CAAC;AAAET,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;AACAU,EAAAA,cAAc,CAACC,KAAK,CAACE,IAAI,CAACC,MAAL,GAAY,CAAb,CAAN,CAAd;AACD,C,CAED;;;AACA,SAASC,iBAAT,GAA4B;AAC1B,QAAM,CAACJ,KAAD,EAAQF,QAAR,IAAoBf,UAAU,CAACG,OAAD,EAAU,CAACD,aAAa,CAACK,oBAAd,EAAD,CAAV,CAApC;AACA,QAAM,CAACe,WAAD,EAAcN,cAAd,IAAgCjB,QAAQ,CAACkB,KAAK,CAAC,CAAD,CAAN,CAA9C;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AACE,IAAA,WAAW,EAAEK,WADf;AAEE,IAAA,cAAc,EAAEN,cAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE;AAAQ,IAAA,OAAO,EAAEF,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,eAME;AAAQ,IAAA,OAAO,EAAEI,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,CADF;AAUD;;AAED,eAAeG,iBAAf","sourcesContent":["import React, { useState, useReducer } from 'react';\n\n//custom files\nimport CardEditorWrapper from '../CardEditor/CardEditorWrapper.js';\nimport * as CardConstants from '../CardEditor/CardConstants.js';\n\n//reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'remove', index, value, property })\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, CardConstants.getDefaultCardObject()];\n    case 'remove':\n      return [\n        ...state.slice(0, action.index),\n        ...state.slice(action.index + 1)\n      ];\n    case 'update':\n      let updatedItem = state[action.index];\n      updatedItem[action.property] = action.value;\n      return [\n        ...state.slice(0, action.index),\n        updatedItem,\n        ...state.slice(action.index + 1)\n      ]\n    case 'reset':\n      return [CardConstants.getDefaultCardObject()];\n    default:\n      throw new Error();\n  }\n}\n\nfunction resetAllCards(){\n  dispatch({ type: 'reset'});\n  setCurrentCard(cards[0]);\n}\n\nfunction addNewCard(){\n  dispatch({ type: 'add'});\n  setCurrentCard(cards[card.length-1]);\n}\n\n//wrapper for card editor section (including input + PDF)\nfunction DeckEditorWrapper(){\n  const [cards, dispatch] = useReducer(reducer, [CardConstants.getDefaultCardObject()]);\n  const [currentCard, setCurrentCard] = useState(cards[0]);\n\n  return (\n    <div>\n      <CardEditorWrapper\n        currentCard={currentCard}\n        setCurrentCard={setCurrentCard}\n      />\n      <button onClick={resetAllCards}>Reset All</button>\n      <button onClick={addNewCard}>Add New Card</button>\n    </div>\n  );\n}\n\nexport default DeckEditorWrapper;\n"]},"metadata":{},"sourceType":"module"}