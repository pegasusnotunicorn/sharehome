{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditor.js\";\nimport React, { useState, useReducer } from 'react'; //custom files\n\nimport * as CardConstants from '../CardEditor/CardConstants.js';\nimport '../../css/DeckEditor.css';\nimport { DebugButtons } from '../utils/DebugTools.js';\nimport downloadPDFFile from '../utils/downloadPDFFile.js';\nimport PDFDocument from './PDFDocument.js';\nimport CardPreview from './CardPreview.js';\nimport CardEditor from '../CardEditor/CardEditor.js'; //reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.card];\n\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item at index\n        if (index === action.index) {\n          return false;\n        } // //remove item with property with value\n        // else if (item[action.property] === action.value){\n        //   return false;\n        // }\n        //every other item stays\n\n\n        return true;\n      });\n\n    case 'update':\n      return state.map((item, index) => {\n        //replace the item at index\n        if (index === action.index) {\n          return action.card;\n        } //leave every other item unchanged\n\n\n        return item;\n      });\n\n    case 'reset':\n      return [action.card];\n\n    default:\n      throw new Error();\n  }\n} //wrapper for card editor section (including input + PDF)\n\n\nlet currentCard = CardConstants.getDefaultCardObject();\n\nfunction DeckEditor() {\n  const [cards, dispatch] = useReducer(reducer, [currentCard]);\n  const [currentIndex, setCurrentIndex] = useState(0); //updates the current card and updates it in the cards array\n\n  const updateCurrentCard = card => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    }); //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }; //download the PDF file\n\n\n  const downloadAllCards = () => {\n    downloadPDFFile( /*#__PURE__*/React.createElement(PDFDocument, {\n      cards: cards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }), \"SHAREHOME_Deck.pdf\");\n  }; //deletes all cards and resets index to 0\n\n\n  const resetAllCards = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n    setCurrentIndex(0);\n  }; //adds a new card and sets the index to last\n\n\n  const addNewCard = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }; //deletes the current card and sets the index to last\n\n\n  const removeCurrentCard = () => {\n    const newLength = cards.length - 1; //if there are no more cards left, just reset\n\n    if (newLength <= 0) {\n      resetAllCards();\n    } else {\n      let newCurrentIndex = currentIndex <= 1 ? 1 : currentIndex;\n      currentCard = cards[newCurrentIndex - 1];\n      dispatch({\n        type: 'remove',\n        index: newCurrentIndex\n      });\n      setCurrentIndex(newCurrentIndex);\n    }\n  }; //renders a specific card\n\n\n  const goToCard = cardIndex => {\n    setCurrentIndex(cardIndex);\n    currentCard = cards[cardIndex];\n  }; //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n\n\n  const listOfCards = cards.map((step, move) => {\n    let className = \"cardPreview\"; //current card is this button!\n\n    if (move === currentIndex) {\n      className = className + \" currentCard\";\n    }\n\n    return /*#__PURE__*/React.createElement(CardPreview, {\n      key: \"cardPreview\" + move,\n      className: className,\n      currentCard: step,\n      currentIndex: move,\n      handleClick: goToCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebarButtonWrapper sidebarContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sideBarButton\",\n    onClick: addNewCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, \"Add New Card\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sideBarButton\",\n    onClick: removeCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, \"Remove Current Card\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sideBarButton\",\n    onClick: downloadAllCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, \"Download All Cards\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sideBarButton\",\n    onClick: resetAllCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, \"Reset All Cards\")), /*#__PURE__*/React.createElement(DebugButtons, {\n    currentCard: currentCard,\n    currentIndex: currentIndex,\n    cards: cards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cardPreviewWrapper sidebarContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, listOfCards))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardEditor, {\n    cards: cards,\n    currentCard: currentCard,\n    setCurrentCard: updateCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default DeckEditor;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditor.js"],"names":["React","useState","useReducer","CardConstants","DebugButtons","downloadPDFFile","PDFDocument","CardPreview","CardEditor","reducer","state","action","type","card","filter","item","index","map","Error","currentCard","getDefaultCardObject","DeckEditor","cards","dispatch","currentIndex","setCurrentIndex","updateCurrentCard","downloadAllCards","resetAllCards","addNewCard","length","removeCurrentCard","newLength","newCurrentIndex","goToCard","cardIndex","listOfCards","step","move","className"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react';\n\n//custom files\nimport * as CardConstants from '../CardEditor/CardConstants.js';\nimport '../../css/DeckEditor.css';\nimport { DebugButtons } from '../utils/DebugTools.js';\nimport downloadPDFFile from '../utils/downloadPDFFile.js';\nimport PDFDocument from './PDFDocument.js';\nimport CardPreview from './CardPreview.js';\nimport CardEditor from '../CardEditor/CardEditor.js';\n\n//reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.card];\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item at index\n        if(index === action.index) {\n          return false;\n        }\n        // //remove item with property with value\n        // else if (item[action.property] === action.value){\n        //   return false;\n        // }\n        //every other item stays\n        return true;\n      });\n    case 'update':\n      return state.map((item, index) => {\n        //replace the item at index\n        if(index === action.index) {\n          return action.card;\n        }\n        //leave every other item unchanged\n        return item;\n      });\n    case 'reset':\n      return [action.card];\n    default:\n      throw new Error();\n  }\n}\n\n//wrapper for card editor section (including input + PDF)\nlet currentCard = CardConstants.getDefaultCardObject();\nfunction DeckEditor(){\n  const [cards, dispatch] = useReducer(reducer, [currentCard]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  //updates the current card and updates it in the cards array\n  const updateCurrentCard = (card) => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    });\n\n    //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }\n\n  //download the PDF file\n  const downloadAllCards = () => {\n    downloadPDFFile(<PDFDocument\n      cards={cards}\n    />, \"SHAREHOME_Deck.pdf\");\n  }\n\n  //deletes all cards and resets index to 0\n  const resetAllCards = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n    setCurrentIndex(0);\n  }\n\n  //adds a new card and sets the index to last\n  const addNewCard = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }\n\n  //deletes the current card and sets the index to last\n  const removeCurrentCard = () => {\n    const newLength = cards.length - 1;\n    //if there are no more cards left, just reset\n    if (newLength <= 0){\n      resetAllCards();\n    }\n    else {\n      let newCurrentIndex = (currentIndex <= 1) ? 1 : currentIndex;\n      currentCard = cards[newCurrentIndex - 1];\n      dispatch({\n        type: 'remove',\n        index: newCurrentIndex\n      });\n      setCurrentIndex(newCurrentIndex);\n    }\n  }\n\n  //renders a specific card\n  const goToCard = (cardIndex) => {\n    setCurrentIndex(cardIndex);\n    currentCard = cards[cardIndex];\n  }\n\n  //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n  const listOfCards = cards.map((step, move) => {\n    let className = \"cardPreview\";\n\n    //current card is this button!\n    if (move === currentIndex){\n      className = className + \" currentCard\";\n    }\n\n    return (\n      <CardPreview\n        key={\"cardPreview\" + move}\n        className={className}\n        currentCard={step}\n        currentIndex={move}\n        handleClick={goToCard}\n      />\n    );\n  });\n\n  return (\n    <div>\n      <div>\n        <div className=\"sidebar\">\n        <div className=\"sidebarButtonWrapper sidebarContent\">\n          <button className=\"sideBarButton\" onClick={addNewCard}>Add New Card</button>\n          <button className=\"sideBarButton\" onClick={removeCurrentCard}>Remove Current Card</button>\n          <button className=\"sideBarButton\" onClick={downloadAllCards}>Download All Cards</button>\n          <button className=\"sideBarButton\" onClick={resetAllCards}>Reset All Cards</button>\n        </div>\n        <DebugButtons\n          currentCard={currentCard}\n          currentIndex={currentIndex}\n          cards={cards}\n        />\n        <div className=\"cardPreviewWrapper sidebarContent\">\n        {listOfCards}\n        </div>\n      </div>\n      </div>\n      <div className=\"content\">\n        <CardEditor\n          cards={cards}\n          currentCard={currentCard}\n          setCurrentCard={updateCurrentCard}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default DeckEditor;\n"]},"metadata":{},"sourceType":"module"}