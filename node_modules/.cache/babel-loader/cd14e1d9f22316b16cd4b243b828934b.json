{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditor.js\";\nimport React, { useState, useReducer, useEffect } from 'react'; //custom files\n\nimport * as CardConstants from '../utils/CardConstants.js';\nimport '../../css/deckEditor.css';\nimport { DebugButtons } from '../utils/DebugTools.js';\nimport DownloadPDFFile from '../PDFDocument/DownloadPDFFile.js';\nimport PDFDocument from '../PDFDocument/PDFDocument.js';\nimport CardPreview from './CardPreview.js';\nimport CardEditor from '../CardEditor/CardEditor.js'; //wrapper for card editor section (including input + PDF)\n\nlet currentCard = CardConstants.getDefaultCardObject();\n\nfunction DeckEditor() {\n  const [cards, dispatch] = useReducer(reducer, [currentCard]);\n  const [currentIndex, setCurrentIndex] = useState(0); //updates the current card and updates it in the cards array\n\n  const updateCurrentCard = card => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    }); //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }; //download the PDF file\n\n\n  const downloadAllCards = () => {\n    DownloadPDFFile( /*#__PURE__*/React.createElement(PDFDocument, {\n      cards: cards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }), \"SHAREHOME_Deck.pdf\");\n  }; //deletes all cards and resets index to 0\n\n\n  const resetAllCards = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n    setCurrentIndex(0);\n  }; //adds a new card and sets the index to last\n\n\n  const addNewCard = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }; //deletes the current card and sets the index to last\n\n\n  const removeCurrentCard = () => {\n    const newLength = cards.length - 1; //if there are no more cards left, just reset\n\n    if (newLength <= 0) {\n      resetAllCards();\n    } else {\n      let newCurrentIndex = currentIndex - 1 <= 0 ? 0 : currentIndex - 1;\n      currentCard = cards[newCurrentIndex];\n      dispatch({\n        type: 'remove',\n        index: currentIndex\n      });\n      setCurrentIndex(newCurrentIndex);\n    }\n  }; //duplicates the current card and sets the index to it\n\n\n  const duplicateCurrentCard = () => {\n    currentCard = { ...currentCard\n    };\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }; //renders a specific card\n\n\n  const goToCard = cardIndex => {\n    setCurrentIndex(cardIndex);\n    currentCard = cards[cardIndex];\n    scrollTo(cardIndex);\n  }; //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n\n\n  const listOfCards = cards.map((step, move) => {\n    let cardPreviewProps = {\n      key: \"cardPreview\" + move,\n      id: \"cardPreview\" + move,\n      currentCard: step,\n      currentIndex: move,\n      handleClick: goToCard,\n      //current card is this button!\n      ifCurrentCard: move === currentIndex ? \" currentCard\" : \"\",\n      number: move === currentIndex ? \"EDITING\" : move + 1\n    };\n    return /*#__PURE__*/React.createElement(CardPreview, Object.assign({}, cardPreviewProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }));\n  }); //focus the current card in the preview pane\n\n  useEffect(() => {\n    scrollTo(currentIndex);\n  }, [cards, currentIndex]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sidebarButtonWrapper sidebarContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sideBarButton\",\n    onClick: downloadAllCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"Download All Cards\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sideBarButton\",\n    onClick: resetAllCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, \"Reset All Cards\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sideBarButton\",\n    onClick: addNewCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, \"Add New Card\"), /*#__PURE__*/React.createElement(DebugButtons, {\n    currentCard: currentCard,\n    currentIndex: currentIndex,\n    cards: cards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cardPreviewWrapper sidebarContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, listOfCards)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardEditor, {\n    cards: cards,\n    currentCard: currentCard,\n    setCurrentCard: updateCurrentCard,\n    removeCurrentCard: removeCurrentCard,\n    duplicateCurrentCard: duplicateCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default DeckEditor;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditor.js"],"names":["React","useState","useReducer","useEffect","CardConstants","DebugButtons","DownloadPDFFile","PDFDocument","CardPreview","CardEditor","currentCard","getDefaultCardObject","DeckEditor","cards","dispatch","reducer","currentIndex","setCurrentIndex","updateCurrentCard","card","type","index","downloadAllCards","resetAllCards","addNewCard","length","removeCurrentCard","newLength","newCurrentIndex","duplicateCurrentCard","goToCard","cardIndex","scrollTo","listOfCards","map","step","move","cardPreviewProps","key","id","handleClick","ifCurrentCard","number"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect } from 'react';\n\n//custom files\nimport * as CardConstants from '../utils/CardConstants.js';\nimport '../../css/deckEditor.css';\nimport { DebugButtons } from '../utils/DebugTools.js';\nimport DownloadPDFFile from '../PDFDocument/DownloadPDFFile.js';\nimport PDFDocument from '../PDFDocument/PDFDocument.js';\nimport CardPreview from './CardPreview.js';\nimport CardEditor from '../CardEditor/CardEditor.js';\n\n//wrapper for card editor section (including input + PDF)\nlet currentCard = CardConstants.getDefaultCardObject();\nfunction DeckEditor(){\n  const [cards, dispatch] = useReducer(reducer, [currentCard]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  //updates the current card and updates it in the cards array\n  const updateCurrentCard = (card) => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    });\n\n    //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }\n\n  //download the PDF file\n  const downloadAllCards = () => {\n    DownloadPDFFile(<PDFDocument\n      cards={cards}\n    />, \"SHAREHOME_Deck.pdf\");\n  }\n\n  //deletes all cards and resets index to 0\n  const resetAllCards = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n    setCurrentIndex(0);\n  }\n\n  //adds a new card and sets the index to last\n  const addNewCard = () => {\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }\n\n  //deletes the current card and sets the index to last\n  const removeCurrentCard = () => {\n    const newLength = cards.length - 1;\n    //if there are no more cards left, just reset\n    if (newLength <= 0){\n      resetAllCards();\n    }\n    else {\n      let newCurrentIndex = (currentIndex - 1 <=0 ) ? 0 : currentIndex - 1;\n      currentCard = cards[newCurrentIndex];\n      dispatch({\n        type: 'remove',\n        index: currentIndex\n      });\n      setCurrentIndex(newCurrentIndex);\n    }\n  }\n\n  //duplicates the current card and sets the index to it\n  const duplicateCurrentCard = () => {\n    currentCard = {...currentCard};\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n    setCurrentIndex(cards.length);\n  }\n\n  //renders a specific card\n  const goToCard = (cardIndex) => {\n    setCurrentIndex(cardIndex);\n    currentCard = cards[cardIndex];\n    scrollTo(cardIndex);\n  }\n\n  //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n  const listOfCards = cards.map((step, move) => {\n\n    let cardPreviewProps = {\n      key: \"cardPreview\" + move,\n      id : \"cardPreview\" + move,\n      currentCard: step,\n      currentIndex: move,\n      handleClick: goToCard,\n      //current card is this button!\n      ifCurrentCard : (move === currentIndex) ? \" currentCard\" : \"\",\n      number : (move === currentIndex) ? \"EDITING\" : move + 1,\n    }\n\n    return (<CardPreview {...cardPreviewProps}/>);\n  });\n\n  //focus the current card in the preview pane\n  useEffect(()=>{\n    scrollTo(currentIndex);\n  }, [cards, currentIndex]);\n\n  return (\n    <div>\n      <div className=\"sidebar\">\n        <div className=\"sidebarButtonWrapper sidebarContent\">\n          <button className=\"sideBarButton\" onClick={downloadAllCards}>Download All Cards</button>\n          <button className=\"sideBarButton\" onClick={resetAllCards}>Reset All Cards</button>\n          <button className=\"sideBarButton\" onClick={addNewCard}>Add New Card</button>\n          <DebugButtons\n            currentCard={currentCard}\n            currentIndex={currentIndex}\n            cards={cards}\n          />\n        </div>\n        <div className=\"cardPreviewWrapper sidebarContent\">\n          {listOfCards}\n        </div>\n      </div>\n      <div className=\"content\">\n        <CardEditor\n          cards={cards}\n          currentCard={currentCard}\n          setCurrentCard={updateCurrentCard}\n          removeCurrentCard={removeCurrentCard}\n          duplicateCurrentCard={duplicateCurrentCard}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default DeckEditor;\n"]},"metadata":{},"sourceType":"module"}