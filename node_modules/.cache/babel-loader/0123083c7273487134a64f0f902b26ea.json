{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/CardEditor/CardEditor.js\";\nimport React, { useState, useLayoutEffect, useRef } from 'react'; // import { PDFViewer } from '@react-pdf/renderer';\n//custom files\n\nimport PDFDocument from './PDFDocument.js';\nimport downloadPDFFile from '../utils/downloadPDFFile.js';\nimport { getImageObject, magnifyValue } from './CardConstants.js';\nimport { viewerHeight, viewerWidth } from '../../css/PDFViewerDynamicStyles.js';\nimport CardViewer from './CardViewer.js';\nimport InputWrapper from './InputWrapper.js'; //get the X and Y coordinates of mouse inside the bounding rect\n\nfunction getMouseXY(e) {\n  let rect = e.currentTarget.getBoundingClientRect();\n  return {\n    x: e.clientX - rect.left,\n    //x position within the element.\n    y: e.clientY - rect.top //y position within the element.\n\n  };\n} //wrapper for card editor section (including input + PDF)\n//needs to get via props, the currentCard and setter for changing currentCard properties\n\n\nfunction CardEditor(props) {\n  const currentCard = props.currentCard;\n  const setCurrentCard = props.setCurrentCard; //returns a new card details object with newValue for newProp\n\n  const updateAndReturnCurrentCard = (newProp, newValue) => {\n    return { ...currentCard,\n      [newProp]: newValue\n    };\n  }; //event handlers for inputs\n\n\n  const handleInputChange = e => {\n    switch (e.target.name) {\n      case 'image':\n        if (e.target.files[0]) {\n          const tempImageURL = URL.createObjectURL(e.target.files[0]);\n          const tempImageName = e.target.files[0].name; //get new details (width / height) of uploaded image and generate a new image object\n\n          let img = new Image();\n\n          img.onload = function () {\n            let tempCard = updateAndReturnCurrentCard(\"image\", getImageObject(tempImageURL, tempImageName, img.width, img.height));\n            setCurrentCard(tempCard);\n          };\n\n          img.src = tempImageURL;\n        }\n\n        break;\n\n      case 'download':\n        downloadPDFFile( /*#__PURE__*/React.createElement(PDFDocument, {\n          cards: props.cards,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }\n        }), currentCard.name + \".pdf\");\n        break;\n\n      default:\n        setCurrentCard(updateAndReturnCurrentCard(e.target.name, e.target.value));\n        break;\n    }\n  }; //handling image movement\n\n\n  const [startingCoords, setStartingCoords] = useState(false); //set starting coordinates on mouse down\n\n  const handleMouseDown = e => {\n    let mouseXY = getMouseXY(e);\n    setStartingCoords({\n      x: mouseXY.x,\n      y: mouseXY.y\n    });\n  };\n\n  const handleMouseUp = e => {\n    setStartingCoords(false);\n  };\n\n  const handleMouseMove = e => {\n    //if mouse down\n    if (startingCoords) {\n      let mouseXY = getMouseXY(e);\n      let deltaX = startingCoords.x - mouseXY.x;\n      let deltaY = startingCoords.y - mouseXY.y;\n      setStartingCoords({\n        x: mouseXY.x,\n        y: mouseXY.y\n      }); //dont let the image move outside of the bounds of the viewer\n\n      let newX = currentCard.image.viewerX - deltaX;\n      let newY = currentCard.image.viewerY - deltaY;\n      newX = newX > 0 ? 0 : newX;\n      newX = newX < -(currentCard.image.viewerWidth - viewerWidth) ? -(currentCard.image.viewerWidth - viewerWidth) : newX;\n      newY = newY > 0 ? 0 : newY;\n      newY = newY < -(currentCard.image.viewerHeight - viewerHeight) ? -(currentCard.image.viewerHeight - viewerHeight) : newY; //click to drag/move image\n\n      let tempCard = updateAndReturnCurrentCard(\"image\", { ...currentCard.image,\n        x: Math.round(newX / magnifyValue),\n        //need to round cuz react-pdf doesnt like decimals\n        y: Math.round(newY / magnifyValue),\n        viewerX: newX,\n        viewerY: newY\n      });\n      setCurrentCard(tempCard);\n    }\n  }; // //debug how PDF looks faster with PDFViewer built into browser, dont have to download file each time\n  // let embeddedPDF = (\n  //   <div className=\"EmbeddedPDFViewer\" style={{\n  //     width: viewerWidth,\n  //     height: viewerHeight\n  //   }}></div>\n  // )\n  // if (!startingCoords){\n  //   embeddedPDF = (\n  //     <div>\n  //       <PDFViewer className=\"EmbeddedPDFViewer\" width={viewerWidth} height={viewerHeight}>\n  //         <PDFDocument cards={props.cards}/>\n  //       </PDFViewer>\n  //     </div>\n  //   )\n  // }\n\n\n  const targetRef = useRef();\n  console.log(targetRef.current);\n  useLayoutEffect(() => {\n    if (targetRef.current) {\n      targetRef.current.copyInputStyles();\n      targetRef.current.updateInputWidth();\n      console.log(targetRef.current);\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardViewer, {\n    currentCard: currentCard,\n    textNoPointerEvent: startingCoords ? \"nopointerevent\" : \"\" //so we can move image while over text, but let text be clickable\n    ,\n    handleMouseDown: handleMouseDown,\n    handleMouseUp: handleMouseUp,\n    handleMouseMove: handleMouseMove,\n    handleInputChange: handleInputChange,\n    targetRef: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(InputWrapper, {\n    handleInputChange: handleInputChange,\n    currentCard: currentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default CardEditor;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/CardEditor/CardEditor.js"],"names":["React","useState","useLayoutEffect","useRef","PDFDocument","downloadPDFFile","getImageObject","magnifyValue","viewerHeight","viewerWidth","CardViewer","InputWrapper","getMouseXY","e","rect","currentTarget","getBoundingClientRect","x","clientX","left","y","clientY","top","CardEditor","props","currentCard","setCurrentCard","updateAndReturnCurrentCard","newProp","newValue","handleInputChange","target","name","files","tempImageURL","URL","createObjectURL","tempImageName","img","Image","onload","tempCard","width","height","src","cards","value","startingCoords","setStartingCoords","handleMouseDown","mouseXY","handleMouseUp","handleMouseMove","deltaX","deltaY","newX","image","viewerX","newY","viewerY","Math","round","targetRef","console","log","current","copyInputStyles","updateInputWidth"],"mappings":"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","sourcesContent":["import React, { useState, useLayoutEffect, useRef } from 'react';\n// import { PDFViewer } from '@react-pdf/renderer';\n\n//custom files\nimport PDFDocument from './PDFDocument.js';\nimport downloadPDFFile from '../utils/downloadPDFFile.js';\nimport { getImageObject, magnifyValue } from './CardConstants.js';\nimport { viewerHeight, viewerWidth } from '../../css/PDFViewerDynamicStyles.js';\nimport CardViewer from './CardViewer.js';\nimport InputWrapper from './InputWrapper.js';\n\n//get the X and Y coordinates of mouse inside the bounding rect\nfunction getMouseXY(e){\n  let rect = e.currentTarget.getBoundingClientRect();\n  return {\n    x: e.clientX - rect.left, //x position within the element.\n    y: e.clientY - rect.top,  //y position within the element.\n  }\n}\n\n//wrapper for card editor section (including input + PDF)\n//needs to get via props, the currentCard and setter for changing currentCard properties\nfunction CardEditor(props){\n  const currentCard = props.currentCard;\n  const setCurrentCard = props.setCurrentCard;\n\n  //returns a new card details object with newValue for newProp\n  const updateAndReturnCurrentCard = (newProp, newValue) => {\n    return {\n      ...currentCard,\n      [newProp]: newValue\n    }\n  }\n\n  //event handlers for inputs\n  const handleInputChange = (e) => {\n    switch (e.target.name) {\n      case 'image':\n        if (e.target.files[0]){\n          const tempImageURL = URL.createObjectURL(e.target.files[0]);\n          const tempImageName = e.target.files[0].name;\n\n          //get new details (width / height) of uploaded image and generate a new image object\n          let img = new Image();\n          img.onload = function () {\n            let tempCard = updateAndReturnCurrentCard(\"image\", getImageObject(\n              tempImageURL,\n              tempImageName,\n              img.width,\n              img.height,\n            ));\n            setCurrentCard(tempCard);\n          };\n          img.src = tempImageURL;\n        }\n        break;\n      case 'download':\n        downloadPDFFile(<PDFDocument\n          cards={props.cards}\n        />, currentCard.name + \".pdf\");\n        break;\n      default:\n        setCurrentCard(updateAndReturnCurrentCard(e.target.name, e.target.value));\n        break;\n    }\n  }\n\n  //handling image movement\n  const [startingCoords, setStartingCoords] = useState(false);\n\n  //set starting coordinates on mouse down\n  const handleMouseDown = (e) => {\n    let mouseXY = getMouseXY(e);\n    setStartingCoords({\n      x: mouseXY.x,\n      y: mouseXY.y\n    });\n  }\n  const handleMouseUp = (e) => {\n    setStartingCoords(false);\n  }\n  const handleMouseMove = (e) => {\n    //if mouse down\n    if (startingCoords){\n      let mouseXY = getMouseXY(e);\n      let deltaX = startingCoords.x - mouseXY.x;\n      let deltaY = startingCoords.y - mouseXY.y;\n\n      setStartingCoords({\n        x: mouseXY.x,\n        y: mouseXY.y,\n      });\n\n      //dont let the image move outside of the bounds of the viewer\n      let newX = currentCard.image.viewerX - deltaX;\n      let newY = currentCard.image.viewerY - deltaY;\n      newX = (newX > 0) ? 0 : newX;\n      newX = (newX < -(currentCard.image.viewerWidth - viewerWidth)) ? -(currentCard.image.viewerWidth - viewerWidth) : newX;\n      newY = (newY > 0) ? 0 : newY;\n      newY = (newY < -(currentCard.image.viewerHeight - viewerHeight)) ? -(currentCard.image.viewerHeight - viewerHeight) : newY;\n\n      //click to drag/move image\n      let tempCard = updateAndReturnCurrentCard(\"image\", {\n        ...currentCard.image,\n        x: Math.round(newX/magnifyValue),   //need to round cuz react-pdf doesnt like decimals\n        y: Math.round(newY/magnifyValue),\n        viewerX: newX,\n        viewerY: newY,\n      });\n      setCurrentCard(tempCard);\n    }\n  }\n\n  // //debug how PDF looks faster with PDFViewer built into browser, dont have to download file each time\n  // let embeddedPDF = (\n  //   <div className=\"EmbeddedPDFViewer\" style={{\n  //     width: viewerWidth,\n  //     height: viewerHeight\n  //   }}></div>\n  // )\n  // if (!startingCoords){\n  //   embeddedPDF = (\n  //     <div>\n  //       <PDFViewer className=\"EmbeddedPDFViewer\" width={viewerWidth} height={viewerHeight}>\n  //         <PDFDocument cards={props.cards}/>\n  //       </PDFViewer>\n  //     </div>\n  //   )\n  // }\n\n  const targetRef = useRef();\n  console.log(targetRef.current);\n  useLayoutEffect(() => {\n    if (targetRef.current) {\n      targetRef.current.copyInputStyles()\n      targetRef.current.updateInputWidth()\n      console.log(targetRef.current);\n    }\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <CardViewer\n          currentCard={currentCard}\n          textNoPointerEvent={(startingCoords) ? \"nopointerevent\" : \"\"}   //so we can move image while over text, but let text be clickable\n          handleMouseDown={handleMouseDown}\n          handleMouseUp={handleMouseUp}\n          handleMouseMove={handleMouseMove}\n          handleInputChange={handleInputChange}\n          targetRef={targetRef}\n        />\n      </div>\n      <InputWrapper\n        handleInputChange={handleInputChange}\n        currentCard={currentCard}\n      />\n    </div>\n  );\n}\n\nexport default CardEditor;\n"]},"metadata":{},"sourceType":"module"}