{"ast":null,"code":"var _jsxFileName = \"/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditorWrapper.js\";\nimport React, { useState, useReducer } from 'react'; //custom files\n\nimport CardEditorWrapper from '../CardEditor/CardEditorWrapper.js';\nimport * as CardConstants from '../CardEditor/CardConstants.js'; //reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.card];\n\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item at index\n        if (index === action.index) {\n          return false;\n        } // //remove item with property with value\n        // else if (item[action.property] === action.value){\n        //   return false;\n        // }\n        //every other item stays\n\n\n        return true;\n      });\n\n    case 'update':\n      return state.map((item, index) => {\n        //replace the item at index\n        if (index === action.index) {\n          return action.card;\n        } //leave every other item unchanged\n\n\n        return item;\n      });\n\n    case 'reset':\n      return [action.card];\n\n    default:\n      throw new Error();\n  }\n} //wrapper for card editor section (including input + PDF)\n\n\nlet currentCard = CardConstants.getDefaultCardObject();\n\nfunction DeckEditorWrapper() {\n  const [cards, dispatch] = useReducer(reducer, [currentCard]);\n  const [currentIndex, setCurrentIndex] = useState(0); //updates the current card and updates it in the cards array\n\n  const updateCurrentCard = card => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    }); //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }; //deletes all cards and resets index to 0\n\n\n  const resetAllCards = () => {\n    setCurrentIndex(0);\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n  }; //adds a new card and sets the index to last\n\n\n  const addNewCard = () => {\n    setCurrentIndex(cards.length + 1);\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n  }; //deletes the current card and sets the index to last\n\n\n  const removeCurrentCard = () => {\n    const newLength = cards.length - 1;\n    setCurrentIndex(newLength); //if there are no more cards left, just reset\n\n    if (newLength <= 0) {\n      resetAllCards();\n    } else {\n      currentCard = cards[newLength - 1];\n      dispatch({\n        type: 'remove',\n        index: newLength\n      });\n    }\n  }; //renders a specific card\n\n\n  const goToCard = cardIndex => {\n    setCurrentIndex(cardIndex);\n    currentCard = cards[cardIndex];\n  }; //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n\n\n  const listOfCards = cards.map((step, move) => {\n    const desc = 'Go to card #' + (move + 1);\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: \"card\" + move,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => goToCard(move),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, desc));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardEditorWrapper, {\n    currentCard: currentCard,\n    setCurrentCard: updateCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetAllCards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, \"Reset All\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNewCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, \"Add New Card\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: removeCurrentCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, \"Remove Current Card\"), /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, listOfCards), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, \"Dev tools\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      console.log(currentCard);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Log current card\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      console.log(currentIndex);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, \"Log current index\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      console.log(cards);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, \"Log cards\")));\n}\n\nexport default DeckEditorWrapper;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/DeckEditor/DeckEditorWrapper.js"],"names":["React","useState","useReducer","CardEditorWrapper","CardConstants","reducer","state","action","type","card","filter","item","index","map","Error","currentCard","getDefaultCardObject","DeckEditorWrapper","cards","dispatch","currentIndex","setCurrentIndex","updateCurrentCard","resetAllCards","addNewCard","length","removeCurrentCard","newLength","goToCard","cardIndex","listOfCards","step","move","desc","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react';\n\n//custom files\nimport CardEditorWrapper from '../CardEditor/CardEditorWrapper.js';\nimport * as CardConstants from '../CardEditor/CardConstants.js';\n\n//reducer to change state in react\n//to add a new card use dispatch({ type: 'add', item: movie })\n//to remove an existing card use dispatch({ type: 'remove', index })\n//to update an existing card use dispatch({ type: 'update', index, value, property })\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.card];\n    case 'remove':\n      return state.filter((item, index) => {\n        //remove item at index\n        if(index === action.index) {\n          return false;\n        }\n        // //remove item with property with value\n        // else if (item[action.property] === action.value){\n        //   return false;\n        // }\n        //every other item stays\n        return true;\n      });\n    case 'update':\n      return state.map((item, index) => {\n        //replace the item at index\n        if(index === action.index) {\n          return action.card;\n        }\n        //leave every other item unchanged\n        return item;\n      });\n    case 'reset':\n      return [action.card];\n    default:\n      throw new Error();\n  }\n}\n\n//wrapper for card editor section (including input + PDF)\nlet currentCard = CardConstants.getDefaultCardObject();\nfunction DeckEditorWrapper(){\n  const [cards, dispatch] = useReducer(reducer, [currentCard]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  //updates the current card and updates it in the cards array\n  const updateCurrentCard = (card) => {\n    currentCard = card;\n    dispatch({\n      type: 'update',\n      index: currentIndex,\n      card: currentCard\n    });\n\n    //if i want to implement an undo, i have access to what the card WAS here\n    //just need to keep this in an array and access it whenever\n    // console.log(cards[currentIndex]);\n  }\n\n  //deletes all cards and resets index to 0\n  const resetAllCards = () => {\n    setCurrentIndex(0);\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'reset',\n      card: currentCard\n    });\n  }\n\n  //adds a new card and sets the index to last\n  const addNewCard = () => {\n    setCurrentIndex(cards.length + 1);\n    currentCard = CardConstants.getDefaultCardObject();\n    dispatch({\n      type: 'add',\n      card: currentCard\n    });\n  }\n\n  //deletes the current card and sets the index to last\n  const removeCurrentCard = () => {\n    const newLength = cards.length - 1;\n    setCurrentIndex(newLength);\n    //if there are no more cards left, just reset\n    if (newLength <= 0){\n      resetAllCards();\n    }\n    else {\n      currentCard = cards[newLength - 1];\n      dispatch({\n        type: 'remove',\n        index: newLength\n      });\n    }\n  }\n\n  //renders a specific card\n  const goToCard = (cardIndex) => {\n    setCurrentIndex(cardIndex);\n    currentCard = cards[cardIndex];\n  }\n\n  //renders a list of buttons to keep track of all cards in the deck (click to go to it)\n  const listOfCards = cards.map((step, move) => {\n    const desc = 'Go to card #' + (move + 1);\n    return (\n      <li key={\"card\"+move}>\n        <button onClick={() => goToCard(move)}>{desc}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div>\n      <CardEditorWrapper\n        currentCard={currentCard}\n        setCurrentCard={updateCurrentCard}\n      />\n      <button onClick={resetAllCards}>Reset All</button>\n      <button onClick={addNewCard}>Add New Card</button>\n      <button onClick={removeCurrentCard}>Remove Current Card</button>\n      <ol>\n        {listOfCards}\n      </ol>\n      <div>\n        Dev tools\n        <button onClick={()=>{console.log(currentCard)}}>Log current card</button>\n        <button onClick={()=>{console.log(currentIndex)}}>Log current index</button>\n        <button onClick={()=>{console.log(cards)}}>Log cards</button>\n        </div>\n    </div>\n  );\n}\n\nexport default DeckEditorWrapper;\n"]},"metadata":{},"sourceType":"module"}