{"ast":null,"code":"import _slicedToArray from\"/Users/1min/Documents/sharehome/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';//export as PDF file\nimport{PDFDownloadLink,PDFViewer}from'@react-pdf/renderer';import PDFDocument from'./PDFDocument';import InputWrapper from'./InputWrapper';import*as CardEditorConstants from'./CardEditorConstants.js';//wrapper for card editor section (including input + PDF)\nfunction CardEditorWrapper(){var _useState=useState(CardEditorConstants.defaultName),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(CardEditorConstants.defaultImagePath),_useState4=_slicedToArray(_useState3,2),image=_useState4[0],setImage=_useState4[1];var myDoc=/*#__PURE__*/React.createElement(PDFDocument,{name:name,image:image});//event handler to change the text state in react\nvar handleNameChange=function handleNameChange(e){setName(e.target.value);};//event handler to change the image state in react\nvar handleImageChange=function handleImageChange(e){var tempImage=e.target.files[0]?e.target.files[0]:CardEditorConstants.defaultImagePath;setImage(URL.createObjectURL(tempImage));};// download link (copy and past into below return)\n// <PDFDownloadLink document={myDoc} fileName={name + \".pdf\"}>\n//   {({ blob, url, loading, error }) => (loading ? 'Loading document...' : 'Download now!')}\n// </PDFDownloadLink>\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"PDFWrapper\",style:{height:CardEditorConstants.PDFDimensions.height*2,width:CardEditorConstants.PDFDimensions.width*2}},/*#__PURE__*/React.createElement(PDFViewer,{scrolling:\"no\",className:\"PDFViewer\"},myDoc)),/*#__PURE__*/React.createElement(InputWrapper,{handleNameChange:handleNameChange,handleImageChange:handleImageChange}));}export default CardEditorWrapper;","map":{"version":3,"sources":["/Users/1min/Documents/sharehome/src/components/CardEditor/CardEditorWrapper.js"],"names":["React","useState","PDFDownloadLink","PDFViewer","PDFDocument","InputWrapper","CardEditorConstants","CardEditorWrapper","defaultName","name","setName","defaultImagePath","image","setImage","myDoc","handleNameChange","e","target","value","handleImageChange","tempImage","files","URL","createObjectURL","height","PDFDimensions","width"],"mappings":"sJAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA;AACA,OAASC,eAAT,CAA0BC,SAA1B,KAA2C,qBAA3C,CAEA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAO,GAAKC,CAAAA,mBAAZ,KAAqC,0BAArC,CAEA;AACA,QAASC,CAAAA,iBAAT,EAA4B,eACFN,QAAQ,CAACK,mBAAmB,CAACE,WAArB,CADN,wCACnBC,IADmB,eACbC,OADa,8BAEAT,QAAQ,CAACK,mBAAmB,CAACK,gBAArB,CAFR,yCAEnBC,KAFmB,eAEZC,QAFY,eAG1B,GAAMC,CAAAA,KAAK,cACT,oBAAC,WAAD,EACE,IAAI,CAAEL,IADR,CAEE,KAAK,CAAEG,KAFT,EADF,CAMA;AACA,GAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,CAAD,CAAO,CAC9BN,OAAO,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP,CACD,CAFD,CAIA;AACA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACH,CAAD,CAAO,CAC/B,GAAMI,CAAAA,SAAS,CAAIJ,CAAC,CAACC,MAAF,CAASI,KAAT,CAAe,CAAf,CAAD,CAAsBL,CAAC,CAACC,MAAF,CAASI,KAAT,CAAe,CAAf,CAAtB,CAA0Cf,mBAAmB,CAACK,gBAAhF,CACAE,QAAQ,CAACS,GAAG,CAACC,eAAJ,CAAoBH,SAApB,CAAD,CAAR,CACD,CAHD,CAKA;AACA;AACA;AACA;AAEA,mBACE,4CACE,2BAAK,SAAS,CAAC,YAAf,CAA4B,KAAK,CAAE,CACjCI,MAAM,CAAElB,mBAAmB,CAACmB,aAApB,CAAkCD,MAAlC,CAA2C,CADlB,CAEjCE,KAAK,CAAEpB,mBAAmB,CAACmB,aAApB,CAAkCC,KAAlC,CAA0C,CAFhB,CAAnC,eAIE,oBAAC,SAAD,EAAW,SAAS,CAAC,IAArB,CAA0B,SAAS,CAAC,WAApC,EACGZ,KADH,CAJF,CADF,cASE,oBAAC,YAAD,EACE,gBAAgB,CAAEC,gBADpB,CAEE,iBAAiB,CAAEI,iBAFrB,EATF,CADF,CAiBD,CAED,cAAeZ,CAAAA,iBAAf","sourcesContent":["import React, { useState } from 'react';\n\n//export as PDF file\nimport { PDFDownloadLink, PDFViewer } from '@react-pdf/renderer';\n\nimport PDFDocument from './PDFDocument';\nimport InputWrapper from './InputWrapper';\nimport * as CardEditorConstants from './CardEditorConstants.js';\n\n//wrapper for card editor section (including input + PDF)\nfunction CardEditorWrapper(){\n  const [name, setName] = useState(CardEditorConstants.defaultName);\n  const [image, setImage] = useState(CardEditorConstants.defaultImagePath);\n  const myDoc = (\n    <PDFDocument\n      name={name}\n      image={image}\n    />);\n\n  //event handler to change the text state in react\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  }\n\n  //event handler to change the image state in react\n  const handleImageChange = (e) => {\n    const tempImage = (e.target.files[0]) ? e.target.files[0] : CardEditorConstants.defaultImagePath;\n    setImage(URL.createObjectURL(tempImage));\n  }\n\n  // download link (copy and past into below return)\n  // <PDFDownloadLink document={myDoc} fileName={name + \".pdf\"}>\n  //   {({ blob, url, loading, error }) => (loading ? 'Loading document...' : 'Download now!')}\n  // </PDFDownloadLink>\n\n  return (\n    <div>\n      <div className=\"PDFWrapper\" style={{\n        height: CardEditorConstants.PDFDimensions.height * 2,\n        width: CardEditorConstants.PDFDimensions.width * 2\n      }}>\n        <PDFViewer scrolling=\"no\" className=\"PDFViewer\">\n          {myDoc}\n        </PDFViewer>\n      </div>\n      <InputWrapper\n        handleNameChange={handleNameChange}\n        handleImageChange={handleImageChange}\n      />\n\n    </div>\n  );\n}\n\nexport default CardEditorWrapper;\n"]},"metadata":{},"sourceType":"module"}